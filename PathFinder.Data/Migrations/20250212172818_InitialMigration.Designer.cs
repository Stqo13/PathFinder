// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PathFinder.Data;

#nullable disable

namespace PathFinder.Data.Migrations
{
    [DbContext(typeof(PathFinderDbContext))]
    [Migration("20250212172818_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a94e9744-895c-4cd0-a450-fb2ca5ea73dc",
                            ConcurrencyStamp = "eab4d980-d470-4b4b-bb99-6768a6d7a63d",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "cbd2b782-e4e3-4f79-84aa-5685d13320cb",
                            ConcurrencyStamp = "4eab5cb1-b6fc-42f3-9f01-93b0625f85b6",
                            Name = "PFUser",
                            NormalizedName = "PFUSER"
                        },
                        new
                        {
                            Id = "b69f39cc-e6e4-4394-b488-0d24c1d546ff",
                            ConcurrencyStamp = "9277a98f-3549-49fd-bb18-9810182b5e8d",
                            Name = "Company",
                            NormalizedName = "COMPANY"
                        },
                        new
                        {
                            Id = "be759a02-939c-4bb6-9063-f25e020d8a56",
                            ConcurrencyStamp = "5b72d0bc-f750-402f-a330-7ebded6824b3",
                            Name = "Institution",
                            NormalizedName = "INSTITUTION"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PathFinder.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("User's address");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasComment("User's date of birth");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasComment("User's first name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasComment("User's last name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "6a358b17-ffbe-4ac9-8d20-92544e3b739d",
                            AccessFailedCount = 0,
                            Address = "Bulgaria, Ruse, ul. \"Hristo Yasenov\" 7",
                            ConcurrencyStamp = "add0eedc-4960-40df-9071-86c3db002821",
                            DateOfBirth = new DateTime(1994, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "artacademy@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "ArtAcademy",
                            LastName = "OOD",
                            LockoutEnabled = false,
                            NormalizedEmail = "ARTACADEMY@GMAIL.COM",
                            NormalizedUserName = "ARTACADEMY123",
                            PasswordHash = "AQAAAAIAAYagAAAAEP2L+GxltWB0PEPPM4ivoufLf8Mq1CPWLbexEDGueOYZOS1vP/jgHu/Vr5H/loblxQ==",
                            PhoneNumber = "0897902119",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "0d9a7888-f1d4-4e74-94b9-97368143ffbf",
                            TwoFactorEnabled = true,
                            UserName = "artacademy123"
                        },
                        new
                        {
                            Id = "fc7c5678-22b4-4650-af6e-4c5f90fa494d",
                            AccessFailedCount = 0,
                            Address = "Bulgaria, Sofia, ul. \"Tsar Asen\" 112",
                            ConcurrencyStamp = "c1d13798-989a-4699-a0e6-4474dc6595b0",
                            DateOfBirth = new DateTime(1994, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "globallingua@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "GlobalLingua",
                            LastName = "OOD",
                            LockoutEnabled = false,
                            NormalizedEmail = "GLOBALLINGUA@GMAIL.COM",
                            NormalizedUserName = "GLOBALLINGUA123",
                            PasswordHash = "AQAAAAIAAYagAAAAEHQDNOulbsOc6rLRYb60+ISXJY+YUn+eERpOGi8QpTjGXYtWZJGHYRv154H+QNAPfQ==",
                            PhoneNumber = "0897662398",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "371dc470-df5f-4670-93e6-531ff3e48294",
                            TwoFactorEnabled = true,
                            UserName = "globallingua123"
                        },
                        new
                        {
                            Id = "723444b3-9434-4465-9044-f7e04fdcca2f",
                            AccessFailedCount = 0,
                            Address = "Bulgaria, Sofia, ul. \"Petar B. Velichkov\" 43",
                            ConcurrencyStamp = "158aa791-a2d5-48f8-a46d-b0340f57a3d7",
                            DateOfBirth = new DateTime(1990, 6, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "marketingacademy@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Marketing Academy",
                            LastName = "OOD",
                            LockoutEnabled = false,
                            NormalizedEmail = "MARKETINGACADEMY@GMAIL.COM",
                            NormalizedUserName = "MARKETINGACADEMY123",
                            PasswordHash = "AQAAAAIAAYagAAAAEIFmwSSLdg2cIRBTB8537kAHPrZ4ZbBzmha3NJKCgqfS8hR5DPO6TrDZIGZfy1p4Kw==",
                            PhoneNumber = "0877742199",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "71309529-7e37-4ffd-834e-a327aee23599",
                            TwoFactorEnabled = true,
                            UserName = "marketingacademy123"
                        },
                        new
                        {
                            Id = "428bcf46-40f2-47b2-ac4a-a49f570178ad",
                            AccessFailedCount = 0,
                            Address = "Bulgaria, Sofia, bul. \"Alexandur Malinov\" 78",
                            ConcurrencyStamp = "01186539-7937-44ff-ba77-b7850404b292",
                            DateOfBirth = new DateTime(2000, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "softschool@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "SoftSchool",
                            LastName = "AD",
                            LockoutEnabled = false,
                            NormalizedEmail = "SOFTSCHOOL@GMAIL.COM",
                            NormalizedUserName = "SOFTSCHOOL123",
                            PasswordHash = "AQAAAAIAAYagAAAAEMwYDldb04b4wvOya/+ETxMNmAiuk2jPvYdRC9JFonA5Z9mAeoH2J57fGCFQFnRANA==",
                            PhoneNumber = "0878765781",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "6a6d329e-fc4f-4929-b0f1-0196a8cc1f39",
                            TwoFactorEnabled = true,
                            UserName = "softschool123"
                        },
                        new
                        {
                            Id = "3cf3fb4a-235e-4c93-b66f-c1557006e067",
                            AccessFailedCount = 0,
                            Address = "Bulgaria, Plovdiv, bul. \"Tsar Boris 3ti Obedinitel\"",
                            ConcurrencyStamp = "148dbc36-58aa-49d1-af6a-adf176bc5210",
                            DateOfBirth = new DateTime(1980, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "telerikikus@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Telerikikus",
                            LastName = "OD",
                            LockoutEnabled = false,
                            NormalizedEmail = "TELERIKIKUS@GMAIL.COM",
                            NormalizedUserName = "TELERIKIKUS123",
                            PasswordHash = "AQAAAAIAAYagAAAAEPyrVrYbAU+gWjVWTZOTGy2hI1xUaTokLX8O8sJKqbM2GSSGyVPcJWt4+TCX5ujwQw==",
                            PhoneNumber = "0898769871",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "151a39a8-b020-47ad-acc1-f822a420b85f",
                            TwoFactorEnabled = true,
                            UserName = "telerikikus123"
                        },
                        new
                        {
                            Id = "fa360a62-9355-474a-824d-aaa85d9fbd65",
                            AccessFailedCount = 0,
                            Address = "Bulgaria, Stara Zagora, ul. \"Stefan Stambolov\" 38",
                            ConcurrencyStamp = "9d8d52d2-476d-4766-be3e-c3cd2c340b41",
                            DateOfBirth = new DateTime(2001, 7, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "wittmath@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "WittMath",
                            LastName = "OOD",
                            LockoutEnabled = false,
                            NormalizedEmail = "WITTMATH@GMAIL.COM",
                            NormalizedUserName = "WITTMATH123",
                            PasswordHash = "AQAAAAIAAYagAAAAEDdHH2Utn0I0D+RxoBYgVvE2kgymV+0auzjw6YV1Kb+JjHL5/Cdyqtb/GE5epRErnA==",
                            PhoneNumber = "0880796431",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "a33929c9-0c98-41eb-865f-be10367086d2",
                            TwoFactorEnabled = true,
                            UserName = "wittmath123"
                        },
                        new
                        {
                            Id = "35e6291c-73f5-48ef-8f3e-5fda2c4ddee1",
                            AccessFailedCount = 0,
                            Address = "Bulgaria, Varna, ul. \"Oborishte\" 13A",
                            ConcurrencyStamp = "70ad19ee-be30-4929-8f0f-2b354f0df7e0",
                            DateOfBirth = new DateTime(1991, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tastecraftacademy@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "TasteCraft Academy",
                            LastName = "OOD",
                            LockoutEnabled = false,
                            NormalizedEmail = "TASTECRAFTACADEMY@GMAIL.COM",
                            NormalizedUserName = "TASTECRAFTACADEMY123",
                            PasswordHash = "AQAAAAIAAYagAAAAEAJ/dCEOozwTKypT+DS0lIR2iUL0IBtvh0X7/oyZacHrtxFYlKutBeBEl0Q/wxOw0w==",
                            PhoneNumber = "0895002619",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "f57befc6-999d-4673-a542-f2b14f0af954",
                            TwoFactorEnabled = true,
                            UserName = "tastecraftacademy123"
                        },
                        new
                        {
                            Id = "e0d6328d-f003-4bb1-8daa-21dcf49db469",
                            AccessFailedCount = 0,
                            Address = "Bulgaria, Pleven, ul. \"Vasil Petleshkov\" 6",
                            ConcurrencyStamp = "aa7849c8-c47e-48dc-a18a-8d80428a72c3",
                            DateOfBirth = new DateTime(2002, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "chick@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Chic Cuts & Styles",
                            LastName = "ET",
                            LockoutEnabled = false,
                            NormalizedEmail = "CHIC@GMAIL.COM",
                            NormalizedUserName = "CHIC123",
                            PasswordHash = "AQAAAAIAAYagAAAAEPKLcE4VxjGDuELZp9mqxLCFh/v4RhF7TkXVSf6uv3szzwNWzZ3qFT8dfKyjh2TVxQ==",
                            PhoneNumber = "0898769871",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "4a7dcfe2-4844-4caf-9e89-fef83d5ea28c",
                            TwoFactorEnabled = true,
                            UserName = "chic123"
                        },
                        new
                        {
                            Id = "eb1f5c9f-186b-4a93-a9bd-64a6055c61cd",
                            AccessFailedCount = 0,
                            Address = "Bulgaria, Sliven,bul. \"Tsar Osvoboditel\" 15А",
                            ConcurrencyStamp = "c7f7dda1-f132-4a33-a0cf-4e33f4e045ae",
                            DateOfBirth = new DateTime(2003, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "theurbangrillandbar@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "The Urban Grill & Bar",
                            LastName = "ET",
                            LockoutEnabled = false,
                            NormalizedEmail = "THEURBANGRILLANDBAR@GMAIL.COM",
                            NormalizedUserName = "THEURBANGRILLANDBAR123",
                            PasswordHash = "AQAAAAIAAYagAAAAENtpYLNHVJrbHA2yh1s9ou2nIBeMSwl6tozGrXU2ZVQ/kJ+4D5U6cAVzr2VM2I3Pfg==",
                            PhoneNumber = "0878439866",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "0b55c459-ba9c-4761-8b3e-34119ae7f346",
                            TwoFactorEnabled = true,
                            UserName = "theurbangrillandbar123"
                        },
                        new
                        {
                            Id = "7dbc12c7-18ec-4af2-a5b7-877ff0df3faf",
                            AccessFailedCount = 0,
                            Address = "Bulgaria, Vrana, ul. \"Kozloduy\" 4",
                            ConcurrencyStamp = "f861586a-2459-44c3-9808-065d8d7d7573",
                            DateOfBirth = new DateTime(2006, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "imaginationacademy@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Imagination Academy",
                            LastName = "OOD",
                            LockoutEnabled = false,
                            NormalizedEmail = "IMAGINATIONACADEMY@GMAIL.COM",
                            NormalizedUserName = "IMAGINATIONACADEMY123",
                            PasswordHash = "AQAAAAIAAYagAAAAEHWpXiv+WriKsBU0yh7c8//oacngyrGgUG80V+3timKNo8ozGeNulg7w4Wi983VvLw==",
                            PhoneNumber = "0878433392",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "34fa7f6f-3219-4ec1-8e8b-c6a503650a7c",
                            TwoFactorEnabled = true,
                            UserName = "imaginationacandemy123"
                        },
                        new
                        {
                            Id = "17585a62-c173-4c68-9e4a-2ba93a419b21",
                            AccessFailedCount = 0,
                            Address = "Bulgaria, Ruse, bul. \"Lipnik\" 8",
                            ConcurrencyStamp = "72a39f49-243e-4f22-853c-379cb92c4c33",
                            DateOfBirth = new DateTime(1986, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "healthcarecentre@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "HealthCare Center",
                            LastName = "OD",
                            LockoutEnabled = false,
                            NormalizedEmail = "HEALTHCARECENTRE@GMAIL.COM",
                            NormalizedUserName = "HEALTHCARECENTRE123",
                            PasswordHash = "AQAAAAIAAYagAAAAELG5J/aVI3wDptY3qk4so/BXOjJBUV+VhrSXaz1K8j3xF+HlS9BE4WI6IojzHr2xsQ==",
                            PhoneNumber = "0870063844",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "d3bf707d-d05c-428b-b9f6-ae53e60142e5",
                            TwoFactorEnabled = true,
                            UserName = "healthcarecentre123"
                        },
                        new
                        {
                            Id = "596c6add-eaae-4890-8d4d-38aa5a0671bd",
                            AccessFailedCount = 0,
                            Address = "Bulgaria, Pleven, ul. \"Ivan Vazov\"",
                            ConcurrencyStamp = "571476f9-8d98-4c28-a2f7-dceb33370509",
                            DateOfBirth = new DateTime(1985, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "primaryinovativeschool.com",
                            EmailConfirmed = true,
                            FirstName = "Primary Inovative School",
                            LastName = "ET",
                            LockoutEnabled = false,
                            NormalizedEmail = "PRIMARYINOVATIVESCHOOL@GMAIL.COM",
                            NormalizedUserName = "PRIMARYINOVATIVESCHOOL123",
                            PasswordHash = "AQAAAAIAAYagAAAAEGThQmSPTiTydApOJvMudYKb21ArUisiTfiyMbtTNpdI4cDKBqJwdPBTZ2ROBTM/0A==",
                            PhoneNumber = "0890811871",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "1b12370e-f02a-40e0-92c3-ad04ef507c2b",
                            TwoFactorEnabled = true,
                            UserName = "primaryinovativeschool123"
                        },
                        new
                        {
                            Id = "16226cef-b670-447e-99a9-b627cb16ae0b",
                            AccessFailedCount = 0,
                            Address = "Bulgaria, Ruse, ул. \"Rila\" 5",
                            ConcurrencyStamp = "f76f0ea1-c3c0-4eb6-8c18-e1b0c3411cde",
                            DateOfBirth = new DateTime(2016, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sttuning@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "STTuning",
                            LastName = "OOD",
                            LockoutEnabled = false,
                            NormalizedEmail = "STTUNING@GMAIL.COM",
                            NormalizedUserName = "STTUNING123",
                            PasswordHash = "AQAAAAIAAYagAAAAEN4k3fpUoH9TAMhMxtEqWW03iCSMdrhcw5aPPSncD4aim//vc3NpXIdkFqZG203jrw==",
                            PhoneNumber = "0876794891",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "c6254221-3a3c-4720-8284-060cb4afb554",
                            TwoFactorEnabled = true,
                            UserName = "sttuning123"
                        },
                        new
                        {
                            Id = "b3693b0c-9c11-48ee-a3be-db37d5439ab0",
                            AccessFailedCount = 0,
                            Address = "Bulgaria, Ruse, ul. \"Рила\" 5",
                            ConcurrencyStamp = "4d73a622-6030-4a60-b687-778c6f8bc278",
                            DateOfBirth = new DateTime(1990, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "codecrafters@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "CodeCrafters",
                            LastName = "ET",
                            LockoutEnabled = false,
                            NormalizedEmail = "CODECRAFTERS@GMAIL.COM",
                            NormalizedUserName = "CODECRAFTERS123",
                            PasswordHash = "AQAAAAIAAYagAAAAEKV49/Anr5ioMnhpc80k5wkquKQRVt0CLYv11+HYVWjBrFSi+1iOSr+UjkxSoEsRiw==",
                            PhoneNumber = "0877769431",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "219a857f-7590-4b38-93d6-2b69f5f9c2a3",
                            TwoFactorEnabled = true,
                            UserName = "codecrafters123"
                        },
                        new
                        {
                            Id = "e2041514-c5ce-4e68-8956-f92298aa3b74",
                            AccessFailedCount = 0,
                            Address = "Bulgaria, Kazanluk, ul. \"Hemus\" 5",
                            ConcurrencyStamp = "8a5cd344-b3ff-426d-a172-801717993d4c",
                            DateOfBirth = new DateTime(2004, 12, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "teodoranedkova@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Teodora",
                            LastName = "Nedkova",
                            LockoutEnabled = false,
                            NormalizedEmail = "TEODORANEDKOVA@GMAIL.COM",
                            NormalizedUserName = "TEODORANEDKOVA123",
                            PasswordHash = "AQAAAAIAAYagAAAAELBGWUGHO18sgkBLqFoJUxNAdx1xUjXjeLtSQ5JxL7g2mHcGHX0R5N4oHGtPg05KoQ==",
                            PhoneNumber = "0879859335",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "20b217f0-85ba-4e31-a8a2-8bccbce5d2d5",
                            TwoFactorEnabled = true,
                            UserName = "teodoranedkova123"
                        },
                        new
                        {
                            Id = "21b4ac01-42ec-4df2-b48c-ebe1cf26adf0",
                            AccessFailedCount = 0,
                            Address = "Bulgaria, Kazanluk, ul. \"Petko Stainov\" 6",
                            ConcurrencyStamp = "66b4c43a-2f63-4b45-b887-d09f25e04774",
                            DateOfBirth = new DateTime(2004, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "stefandimitrov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Stefan",
                            LastName = "Dimitrov",
                            LockoutEnabled = false,
                            NormalizedEmail = "STEFANDIMITROV@GMAIL.COM",
                            NormalizedUserName = "STEFANDIMITROV123",
                            PasswordHash = "AQAAAAIAAYagAAAAEF3wxwcA7zJAhaBuqQ/I4yEneLUUPfqYmh2tkabBT1Zls0vjAJx1QqN2j5tL8uR/Lg==",
                            PhoneNumber = "0890854939",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "99273868-097f-473e-865e-6d1ae62907ba",
                            TwoFactorEnabled = true,
                            UserName = "stefandimitrov123"
                        },
                        new
                        {
                            Id = "e47b8b58-2e3a-4f02-aee5-485d3e6db2b2",
                            AccessFailedCount = 0,
                            Address = "Bulgaria, Kazanluk, ul. \"Dobri Chintulov\" 5",
                            ConcurrencyStamp = "9e5f60f1-cfe5-496f-a7c2-b2df04b07ffb",
                            DateOfBirth = new DateTime(2005, 5, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "alexstefanov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Alex",
                            LastName = "Stefanov",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEXSTEFANOV@GMAIL.COM",
                            NormalizedUserName = "ALEXSTEFANOV123",
                            PasswordHash = "AQAAAAIAAYagAAAAEAkniAI+BTYNiBvfG5J5iyhRbZboaU7dCWV8X7CCecTfpT7UHG/NDPwPhfP1/q7Yxw==",
                            PhoneNumber = "0883856039",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "b79eb8eb-a0ed-4004-8022-1928ea534654",
                            TwoFactorEnabled = true,
                            UserName = "alexstefanov123"
                        },
                        new
                        {
                            Id = "9e547484-9ea8-45e6-a488-d657f6f1c598",
                            AccessFailedCount = 0,
                            Address = "Bulgaria, Kazanluk, ul. \"General Gurko\" 4",
                            ConcurrencyStamp = "cfc729e2-95b6-4247-9c2e-8fa555a940f0",
                            DateOfBirth = new DateTime(2002, 7, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "monikapetrova@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Monika",
                            LastName = "Petrova",
                            LockoutEnabled = false,
                            NormalizedEmail = "MONIKAPETROVA@GMAIL.COM",
                            NormalizedUserName = "MONIKAPETROVA123",
                            PasswordHash = "AQAAAAIAAYagAAAAEPkZNkARZ8T7OoFr/aLqs4DLGKK0hWRtCHWLXhkniRkzWthvOIiQG+3HlhzwKJ7eIw==",
                            PhoneNumber = "0898760394",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "e56b54c7-0bc3-40d2-913e-3147f81838ac",
                            TwoFactorEnabled = true,
                            UserName = "monikapetrova123"
                        },
                        new
                        {
                            Id = "e8d223af-7285-41c5-8c38-9e6989d4410d",
                            AccessFailedCount = 0,
                            Address = "Bulgaria, Kazanluk, ul. \"General Stoletov\" 3",
                            ConcurrencyStamp = "32966dcc-13bf-4e90-81fb-7063f7e8aa15",
                            DateOfBirth = new DateTime(2001, 8, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "iliqmilenov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Iliq",
                            LastName = "Milenov",
                            LockoutEnabled = false,
                            NormalizedEmail = "ILIQMILENOV@GMAIL.COM",
                            NormalizedUserName = "ILIQMILENOV123",
                            PasswordHash = "AQAAAAIAAYagAAAAEPN+3bfJRKJ6c1pHVnhKkJoZkY7uLClFgRQX8smj2579pn5cwkC36Ya/oqiQWBcJBw==",
                            PhoneNumber = "0895068785",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "0b9b698c-fac2-4d4d-88d4-eca88077f4e7",
                            TwoFactorEnabled = true,
                            UserName = "iliqmilenov123"
                        },
                        new
                        {
                            Id = "d444522c-71c1-4cc9-b815-4ea25a49f17b",
                            AccessFailedCount = 0,
                            Address = "Bulgaria, Kazanluk, ul. \"Georgi Sava Rakovski\" 7",
                            ConcurrencyStamp = "4a7d9f06-9131-4005-8971-efd1216101fd",
                            DateOfBirth = new DateTime(1998, 3, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "atanasgudov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Atanas",
                            LastName = "Gudov",
                            LockoutEnabled = false,
                            NormalizedEmail = "ATANASGUDOV@GMAIL.COM",
                            NormalizedUserName = "ATANASGUDOV123",
                            PasswordHash = "AQAAAAIAAYagAAAAEEsCfniCgZP+nLbPJ8SKZVeorNAKrIfvjLueAPlxYBz97I3KW+ebrk2ZysYNLPGt9w==",
                            PhoneNumber = "0885248739",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "4948f175-75ce-48df-a5eb-86365b80c054",
                            TwoFactorEnabled = true,
                            UserName = "atanasgudov123"
                        },
                        new
                        {
                            Id = "b93fa043-cdea-4bd9-9d0b-7b16ee7c5355",
                            AccessFailedCount = 0,
                            Address = "Bulgaria, Plovdiv, ul. \"Georgi Rakovski\" 7",
                            ConcurrencyStamp = "601a305b-43af-45a8-ba6b-3e5f6d8b978c",
                            DateOfBirth = new DateTime(1989, 8, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "simonamincheva@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Simona",
                            LastName = "Mincheva",
                            LockoutEnabled = false,
                            NormalizedEmail = "SIMONAMINCHEVA@GMAIL.COM",
                            NormalizedUserName = "SIMONAMINCHEVA123",
                            PasswordHash = "AQAAAAIAAYagAAAAEB3Vt/gmzVf+Dz7xim9D4N2NRKVZkwkNx4xy3qEDMYdbrGtF5Xk+OegEZwzXOdDHpA==",
                            PhoneNumber = "0897448199",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "89f85961-2220-495a-83b5-159c249f0e40",
                            TwoFactorEnabled = true,
                            UserName = "simonamincheva123"
                        },
                        new
                        {
                            Id = "7d089603-dc80-415a-913b-f24b1a90b5f1",
                            AccessFailedCount = 0,
                            Address = "Bulgaria, Pleven, ul. \"Hadzi Dimitur\" 10",
                            ConcurrencyStamp = "e7b410c7-e9c0-493e-926f-176efc0ebd6b",
                            DateOfBirth = new DateTime(1995, 2, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "georgivasilev@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Georgi",
                            LastName = "Vasilev",
                            LockoutEnabled = false,
                            NormalizedEmail = "GEORGIVASILEV@GMAIL.COM",
                            NormalizedUserName = "GEORGIVASILEV123",
                            PasswordHash = "AQAAAAIAAYagAAAAEGUWhy6AMKR9xLXEC7/8J3H7xyWsTAD4IcQV3HMlhq1e/EFm/Bu6coEKlNlkD94gbQ==",
                            PhoneNumber = "0804442391",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "0b4c0c53-4b6e-466d-a81e-b3082d0b9f4e",
                            TwoFactorEnabled = true,
                            UserName = "georgivasilev123"
                        },
                        new
                        {
                            Id = "ca145762-b5db-4836-b963-85eff67fb124",
                            AccessFailedCount = 0,
                            Address = "Bulgaria, Pleven, ul. \"Hristo Botev\" 4",
                            ConcurrencyStamp = "c2d42e2c-8f36-48b9-9afd-77c48554a6c8",
                            DateOfBirth = new DateTime(1999, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "krasimirdraganov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Krasimir",
                            LastName = "Draganov",
                            LockoutEnabled = false,
                            NormalizedEmail = "KRASIMIRDRAGANOV@GMAIL.COM",
                            NormalizedUserName = "KRASIMIRDRAGANOV123",
                            PasswordHash = "AQAAAAIAAYagAAAAEODryk/u0Txq/XPNgqHJT9VZG4w9SkAlgq3HtXkBon+uKovDNtbu1uXPGIpfVWSucw==",
                            PhoneNumber = "0894555391",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "2199c2a8-de5a-40be-a524-45118e2fa884",
                            TwoFactorEnabled = true,
                            UserName = "krasimirdraganov123"
                        },
                        new
                        {
                            Id = "8d0c3b82-be4b-4fdf-834a-8e436176d9bd",
                            AccessFailedCount = 0,
                            Address = "Bulgaria, Pleven, ul. \"Stefan Karadza\" 6",
                            ConcurrencyStamp = "5e80a778-3b5e-41f6-9caf-2f4d2115d0b8",
                            DateOfBirth = new DateTime(1996, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "svetlingeorgiev@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Svetlin",
                            LastName = "Georgiev",
                            LockoutEnabled = false,
                            NormalizedEmail = "SVETLINGEORGIEV@GMAIL.COM",
                            NormalizedUserName = "SVETLINGEORGIEV123",
                            PasswordHash = "AQAAAAIAAYagAAAAENxxcIWxYnW0zR2/xM5kC9BSZ8xrTli98JXDbwSAX6KDzBIZaJKUGAnMQ9Y6rkjTtA==",
                            PhoneNumber = "0894555881",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "3eaf6ac8-d5ff-402a-a2d7-01bacb9f22a8",
                            TwoFactorEnabled = true,
                            UserName = "svetlingeorgiev123"
                        });
                });

            modelBuilder.Entity("PathFinder.Data.Models.CompanyRoleRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Company request identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Reasoning for the role request");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasComment("Role request sender username");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("Pending/Accepted/Declined request status");

                    b.HasKey("Id");

                    b.ToTable("CompanyRoleRequests");
                });

            modelBuilder.Entity("PathFinder.Data.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Course's identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("AverageStarRating")
                        .HasColumnType("float")
                        .HasComment("Course's average star rating");

                    b.Property<int>("CourseDuration")
                        .HasColumnType("int")
                        .HasComment("Course's duration in weeks");

                    b.Property<string>("Description")
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)")
                        .HasComment("Course's description");

                    b.Property<int>("DurationInMinutes")
                        .HasColumnType("int")
                        .HasComment("Course's lesson duration in minutes");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasComment("Couse's end date");

                    b.Property<string>("InstitutionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Institution's foreign key");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Course's location");

                    b.Property<int>("Mode")
                        .HasColumnType("int")
                        .HasComment("Course's mode(Online/In-person)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasComment("Course's name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Course's monthly price");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasComment("Couse's start date");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AverageStarRating = 4.0,
                            CourseDuration = 6,
                            Description = "Learn the fundamentals of digital marketing, including SEO, PPC, and social media strategies.",
                            DurationInMinutes = 120,
                            EndDate = new DateTime(2027, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstitutionId = "723444b3-9434-4465-9044-f7e04fdcca2f",
                            IsDeleted = false,
                            Location = "Remote",
                            Mode = 0,
                            Name = "Introduction to Digital Marketing",
                            Price = 1900m,
                            StartDate = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            AverageStarRating = 4.5,
                            CourseDuration = 8,
                            Description = "Master the basics of HTML, CSS, and JavaScript in this beginner-friendly web development course.",
                            DurationInMinutes = 150,
                            EndDate = new DateTime(2028, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstitutionId = "428bcf46-40f2-47b2-ac4a-a49f570178ad",
                            IsDeleted = false,
                            Location = "Remote",
                            Mode = 0,
                            Name = "Web Development for Beginners",
                            Price = 1350m,
                            StartDate = new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            AverageStarRating = 4.7999999999999998,
                            CourseDuration = 4,
                            Description = "Dive into the world of data science and learn machine learning algorithms using Python and R.",
                            DurationInMinutes = 180,
                            EndDate = new DateTime(2029, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstitutionId = "3cf3fb4a-235e-4c93-b66f-c1557006e067",
                            IsDeleted = false,
                            Location = "Remote",
                            Mode = 0,
                            Name = "Data Science and Machine Learning",
                            Price = 450m,
                            StartDate = new DateTime(2025, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            AverageStarRating = 4.7000000000000002,
                            CourseDuration = 7,
                            Description = "Gain a foundational understanding of AI, its applications, and how it is changing industries.",
                            DurationInMinutes = 150,
                            EndDate = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstitutionId = "428bcf46-40f2-47b2-ac4a-a49f570178ad",
                            IsDeleted = false,
                            Location = "Remote",
                            Mode = 0,
                            Name = "Introduction to Artificial Intelligence",
                            Price = 1500m,
                            StartDate = new DateTime(2022, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            AverageStarRating = 4.5999999999999996,
                            CourseDuration = 9,
                            Description = "Master the basics of Spanish, including vocabulary, grammar, and conversational skills, in an engaging and interactive environment.",
                            DurationInMinutes = 90,
                            EndDate = new DateTime(2030, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstitutionId = "fc7c5678-22b4-4650-af6e-4c5f90fa494d",
                            IsDeleted = false,
                            Location = "Bulgaria, Burgas, ul. \"Odrin\" 2",
                            Mode = 1,
                            Name = "Spanish for beginners",
                            Price = 2000m,
                            StartDate = new DateTime(2025, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            AverageStarRating = 4.7999999999999998,
                            CourseDuration = 10,
                            Description = "Learn the basics of cooking techniques, kitchen safety, and food presentation in this hands-on culinary course.",
                            DurationInMinutes = 120,
                            EndDate = new DateTime(2023, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstitutionId = "35e6291c-73f5-48ef-8f3e-5fda2c4ddee1",
                            IsDeleted = false,
                            Location = "Bulgaria, Varna, ul. \"Oborishte\" 13A",
                            Mode = 1,
                            Name = "Introduction to Culinary Arts",
                            Price = 2200m,
                            StartDate = new DateTime(2021, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            AverageStarRating = 4.5,
                            CourseDuration = 7,
                            Description = "Relax, rejuvenate, and learn mindfulness practices along with beginner-friendly yoga postures in this course.",
                            DurationInMinutes = 90,
                            EndDate = new DateTime(2025, 2, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstitutionId = "6a358b17-ffbe-4ac9-8d20-92544e3b739d",
                            IsDeleted = false,
                            Location = "Bulgaria, Pazardzik, ul. \"Nayden Gerov\" 6",
                            Mode = 1,
                            Name = "Yoga and Mindfulness for Beginners",
                            Price = 1000m,
                            StartDate = new DateTime(2019, 2, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            AverageStarRating = 4.7000000000000002,
                            CourseDuration = 4,
                            Description = "Improve your English language skills in speaking, listening, reading, and writing through practical lessons and exercises.",
                            DurationInMinutes = 180,
                            EndDate = new DateTime(2025, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstitutionId = "fc7c5678-22b4-4650-af6e-4c5f90fa494d",
                            IsDeleted = false,
                            Location = "Bulgaria, Kazanlak, ul. \"Ivan Vazov\" 3",
                            Mode = 1,
                            Name = "English Language Mastery",
                            Price = 900m,
                            StartDate = new DateTime(2025, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            AverageStarRating = 4.7999999999999998,
                            CourseDuration = 17,
                            Description = "Explore the basics of fine art, including sketching, painting, and sculpting, in a hands-on creative environment.",
                            DurationInMinutes = 240,
                            EndDate = new DateTime(2025, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstitutionId = "6a358b17-ffbe-4ac9-8d20-92544e3b739d",
                            IsDeleted = false,
                            Location = "Bulgaria, Sofia, Vasil Levski Blvd 62",
                            Mode = 1,
                            Name = "Fundamentals of Fine Art",
                            Price = 2500m,
                            StartDate = new DateTime(2022, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            AverageStarRating = 4.7999999999999998,
                            CourseDuration = 9,
                            Description = "Learn the principles of embedded systems design, microcontrollers, and real-time programming in this comprehensive beginner-friendly course.",
                            DurationInMinutes = 240,
                            EndDate = new DateTime(2031, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstitutionId = "3cf3fb4a-235e-4c93-b66f-c1557006e067",
                            IsDeleted = false,
                            Location = "Remote",
                            Mode = 0,
                            Name = "Introduction to Embedded Systems",
                            Price = 1600m,
                            StartDate = new DateTime(2025, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            AverageStarRating = 4.7000000000000002,
                            CourseDuration = 13,
                            Description = "Master the principles of interior design, space planning, and color theory with hands-on projects.",
                            DurationInMinutes = 180,
                            EndDate = new DateTime(2025, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstitutionId = "6a358b17-ffbe-4ac9-8d20-92544e3b739d",
                            IsDeleted = false,
                            Location = "Bulgaria, Sofia, ul. \"Kapitan Andreev\" 29",
                            Mode = 1,
                            Name = "Interior Design Masterclass",
                            Price = 2200m,
                            StartDate = new DateTime(2025, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            AverageStarRating = 4.7999999999999998,
                            CourseDuration = 10,
                            Description = "Learn the essentials of music production, including recording, mixing, and mastering, with hands-on studio sessions.",
                            DurationInMinutes = 120,
                            EndDate = new DateTime(2026, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstitutionId = "6a358b17-ffbe-4ac9-8d20-92544e3b739d",
                            IsDeleted = false,
                            Location = "Bulgaria, Plovdiv, ul. \"Ivan Vazov\" 23",
                            Mode = 1,
                            Name = "Music Production Essentials",
                            Price = 2000m,
                            StartDate = new DateTime(2023, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13,
                            AverageStarRating = 4.9000000000000004,
                            CourseDuration = 15,
                            Description = "Deepen your understanding of calculus concepts, including multivariable calculus, differential equations, and real-world applications.",
                            DurationInMinutes = 45,
                            EndDate = new DateTime(2025, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstitutionId = "fa360a62-9355-474a-824d-aaa85d9fbd65",
                            IsDeleted = false,
                            Location = "Bulgaria, Plovdiv, ul. \"Perushtitsa\" 15",
                            Mode = 1,
                            Name = "Advanced Calculus Workshop",
                            Price = 1100m,
                            StartDate = new DateTime(2023, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 14,
                            AverageStarRating = 4.7999999999999998,
                            CourseDuration = 8,
                            Description = "Learn essential front-end technologies like HTML, CSS, JavaScript, and React to build stunning and responsive web applications.",
                            DurationInMinutes = 100,
                            EndDate = new DateTime(2027, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstitutionId = "428bcf46-40f2-47b2-ac4a-a49f570178ad",
                            IsDeleted = false,
                            Location = "Remote",
                            Mode = 0,
                            Name = "Front-End Web Development Bootcamp",
                            Price = 1500m,
                            StartDate = new DateTime(2025, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 15,
                            AverageStarRating = 4.7000000000000002,
                            CourseDuration = 12,
                            Description = "Explore the core principles of computer engineering, including hardware design, embedded systems, and software integration.",
                            DurationInMinutes = 160,
                            EndDate = new DateTime(2025, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstitutionId = "3cf3fb4a-235e-4c93-b66f-c1557006e067",
                            IsDeleted = false,
                            Location = "Remote",
                            Mode = 0,
                            Name = "Foundations of Computer Engineering",
                            Price = 1000m,
                            StartDate = new DateTime(2023, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 16,
                            AverageStarRating = 4.7999999999999998,
                            CourseDuration = 11,
                            Description = "Get hands-on experience with cybersecurity protocols, encryption techniques, ethical hacking, and network security to protect digital assets.",
                            DurationInMinutes = 260,
                            EndDate = new DateTime(2025, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstitutionId = "428bcf46-40f2-47b2-ac4a-a49f570178ad",
                            IsDeleted = false,
                            Location = "Bulgaria, Plovdiv, ul. \"Zahari Zograf\" 10",
                            Mode = 1,
                            Name = "Cybersecurity Fundamentals",
                            Price = 1399m,
                            StartDate = new DateTime(2022, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("PathFinder.Data.Models.CourseSphere", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasComment("Course's foreign key");

                    b.Property<int>("SphereId")
                        .HasColumnType("int")
                        .HasComment("Sphere's foreign key");

                    b.Property<int?>("CourseId1")
                        .HasColumnType("int");

                    b.Property<int?>("SphereId1")
                        .HasColumnType("int");

                    b.HasKey("CourseId", "SphereId");

                    b.HasIndex("CourseId1");

                    b.HasIndex("SphereId");

                    b.HasIndex("SphereId1");

                    b.ToTable("CoursesSpheres", t =>
                        {
                            t.HasComment("Corses' spheres");
                        });

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            SphereId = 42
                        },
                        new
                        {
                            CourseId = 1,
                            SphereId = 8
                        },
                        new
                        {
                            CourseId = 1,
                            SphereId = 3
                        },
                        new
                        {
                            CourseId = 2,
                            SphereId = 12
                        },
                        new
                        {
                            CourseId = 2,
                            SphereId = 6
                        },
                        new
                        {
                            CourseId = 2,
                            SphereId = 2
                        },
                        new
                        {
                            CourseId = 3,
                            SphereId = 2
                        },
                        new
                        {
                            CourseId = 3,
                            SphereId = 6
                        },
                        new
                        {
                            CourseId = 3,
                            SphereId = 11
                        },
                        new
                        {
                            CourseId = 3,
                            SphereId = 58
                        },
                        new
                        {
                            CourseId = 4,
                            SphereId = 2
                        },
                        new
                        {
                            CourseId = 4,
                            SphereId = 6
                        },
                        new
                        {
                            CourseId = 4,
                            SphereId = 46
                        },
                        new
                        {
                            CourseId = 4,
                            SphereId = 13
                        },
                        new
                        {
                            CourseId = 4,
                            SphereId = 11
                        },
                        new
                        {
                            CourseId = 5,
                            SphereId = 4
                        },
                        new
                        {
                            CourseId = 5,
                            SphereId = 60
                        },
                        new
                        {
                            CourseId = 5,
                            SphereId = 61
                        },
                        new
                        {
                            CourseId = 6,
                            SphereId = 5
                        },
                        new
                        {
                            CourseId = 6,
                            SphereId = 35
                        },
                        new
                        {
                            CourseId = 6,
                            SphereId = 62
                        },
                        new
                        {
                            CourseId = 7,
                            SphereId = 18
                        },
                        new
                        {
                            CourseId = 7,
                            SphereId = 63
                        },
                        new
                        {
                            CourseId = 7,
                            SphereId = 64
                        },
                        new
                        {
                            CourseId = 8,
                            SphereId = 4
                        },
                        new
                        {
                            CourseId = 8,
                            SphereId = 60
                        },
                        new
                        {
                            CourseId = 8,
                            SphereId = 61
                        },
                        new
                        {
                            CourseId = 9,
                            SphereId = 5
                        },
                        new
                        {
                            CourseId = 9,
                            SphereId = 48
                        },
                        new
                        {
                            CourseId = 9,
                            SphereId = 7
                        },
                        new
                        {
                            CourseId = 10,
                            SphereId = 2
                        },
                        new
                        {
                            CourseId = 10,
                            SphereId = 6
                        },
                        new
                        {
                            CourseId = 10,
                            SphereId = 11
                        },
                        new
                        {
                            CourseId = 11,
                            SphereId = 9
                        },
                        new
                        {
                            CourseId = 11,
                            SphereId = 5
                        },
                        new
                        {
                            CourseId = 12,
                            SphereId = 5
                        },
                        new
                        {
                            CourseId = 12,
                            SphereId = 40
                        },
                        new
                        {
                            CourseId = 12,
                            SphereId = 65
                        },
                        new
                        {
                            CourseId = 12,
                            SphereId = 66
                        },
                        new
                        {
                            CourseId = 12,
                            SphereId = 67
                        },
                        new
                        {
                            CourseId = 13,
                            SphereId = 4
                        },
                        new
                        {
                            CourseId = 13,
                            SphereId = 58
                        },
                        new
                        {
                            CourseId = 14,
                            SphereId = 12
                        },
                        new
                        {
                            CourseId = 14,
                            SphereId = 14
                        },
                        new
                        {
                            CourseId = 14,
                            SphereId = 7
                        },
                        new
                        {
                            CourseId = 14,
                            SphereId = 46
                        },
                        new
                        {
                            CourseId = 14,
                            SphereId = 6
                        },
                        new
                        {
                            CourseId = 15,
                            SphereId = 2
                        },
                        new
                        {
                            CourseId = 15,
                            SphereId = 6
                        },
                        new
                        {
                            CourseId = 15,
                            SphereId = 11
                        },
                        new
                        {
                            CourseId = 16,
                            SphereId = 2
                        },
                        new
                        {
                            CourseId = 16,
                            SphereId = 6
                        },
                        new
                        {
                            CourseId = 16,
                            SphereId = 47
                        });
                });

            modelBuilder.Entity("PathFinder.Data.Models.InstitutionRoleRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Company request identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Reasoning for the role request");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasComment("Role request sender username");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("Pending/Accepted/Declined request status");

                    b.HasKey("Id");

                    b.ToTable("InstitutionRoleRequests");
                });

            modelBuilder.Entity("PathFinder.Data.Models.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Job's idetifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("AverageStarRating")
                        .HasColumnType("float")
                        .HasComment("Job average star rating");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Company's foreign key");

                    b.Property<string>("Description")
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)")
                        .HasComment("Job's details");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("JobType")
                        .HasColumnType("int")
                        .HasComment("The type of the job");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Job's location");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Job's position");

                    b.Property<string>("Requirement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Job's requiements");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Job salary");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasComment("Job's title");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Jobs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AverageStarRating = 4.5,
                            CompanyId = "b3693b0c-9c11-48ee-a3be-db37d5439ab0",
                            Description = "Develop and maintain software solutions.",
                            IsDeleted = false,
                            JobType = 0,
                            Location = "Remote",
                            Position = "Junior Developer",
                            Requirement = "1+ year experience in C# and .NET",
                            Salary = 12000m,
                            Title = "Software Developer"
                        },
                        new
                        {
                            Id = 2,
                            AverageStarRating = 3.5,
                            CompanyId = "b3693b0c-9c11-48ee-a3be-db37d5439ab0",
                            Description = "Create visual designs for marketing materials.",
                            IsDeleted = false,
                            JobType = 0,
                            Location = "Remote",
                            Position = "Senior Designer",
                            Requirement = "Proficiency in Adobe Suite",
                            Salary = 14500m,
                            Title = "Graphic Designer"
                        },
                        new
                        {
                            Id = 3,
                            AverageStarRating = 3.2000000000000002,
                            CompanyId = "e0d6328d-f003-4bb1-8daa-21dcf49db469",
                            Description = "Provide hair styling, cutting, and treatment services to clients.",
                            IsDeleted = false,
                            JobType = 1,
                            Location = "Bulgaria, Karlovo, ul. \"Dabensko shose\" 2",
                            Position = "Professional Hairdresser",
                            Requirement = "Certified cosmetologist with 2+ years of experience.",
                            Salary = 4000m,
                            Title = "Hairdresser"
                        },
                        new
                        {
                            Id = 4,
                            AverageStarRating = 4.2999999999999998,
                            CompanyId = "16226cef-b670-447e-99a9-b627cb16ae0b",
                            Description = "Perform vehicle inspections, repairs, and routine maintenance tasks.",
                            IsDeleted = false,
                            JobType = 1,
                            Location = "Bulgaria, Plovdiv, ul. \"Dimo Hadzhidimov\" 4В",
                            Position = "Automotive Technician",
                            Requirement = "Basic mechanical skills and willingness to learn. No prior certification required.",
                            Salary = 8000m,
                            Title = "Auto Mechanic"
                        },
                        new
                        {
                            Id = 5,
                            AverageStarRating = 4.0,
                            CompanyId = "17585a62-c173-4c68-9e4a-2ba93a419b21",
                            Description = "Diagnose and treat skin conditions, provide expert advice on skincare, and perform dermatological procedures.",
                            IsDeleted = false,
                            JobType = 1,
                            Location = "Bulgaria, Ruse, bul. \"Lipnik\" 8",
                            Position = "Certified Dermatologist",
                            Requirement = "Medical degree with specialization in dermatology. Valid state medical license required.",
                            Salary = 12000m,
                            Title = "Dermatologist"
                        },
                        new
                        {
                            Id = 6,
                            AverageStarRating = 2.6000000000000001,
                            CompanyId = "596c6add-eaae-4890-8d4d-38aa5a0671bd",
                            Description = "Teach mathematics to students, prepare lesson plans, and assess student progress.",
                            IsDeleted = false,
                            JobType = 1,
                            Location = "Bulgaria, Pleven, ul. \"Ivan Vazov\"",
                            Position = "High School Math Teacher",
                            Requirement = "Bachelor's degree in Mathematics or Education. Teaching certification preferred.",
                            Salary = 5000m,
                            Title = "Math Teacher"
                        },
                        new
                        {
                            Id = 7,
                            AverageStarRating = 4.0999999999999996,
                            CompanyId = "596c6add-eaae-4890-8d4d-38aa5a0671bd",
                            Description = "Maintain cleanliness and orderliness of the school toilets by performing routine cleaning tasks such as sweeping, mopping, and sanitizing surfaces.",
                            IsDeleted = false,
                            JobType = 1,
                            Location = "Bulgaria, Pleven, ul. \"Ivan Vazov\"",
                            Position = "Toilet Cleaner",
                            Requirement = "No prior experience required, but attention to detail and reliability are essential.",
                            Salary = 1500m,
                            Title = "School Cleaner"
                        },
                        new
                        {
                            Id = 8,
                            AverageStarRating = 4.0999999999999996,
                            CompanyId = "eb1f5c9f-186b-4a93-a9bd-64a6055c61cd",
                            Description = "Prepare and serve alcoholic and non-alcoholic beverages, provide excellent customer service, and maintain a clean and organized bar area to ensure a great experience for guests.",
                            IsDeleted = false,
                            JobType = 1,
                            Location = "Bulgaria, Sliven,bul. \"Tsar Osvoboditel\" 15А",
                            Position = "Toilet Cleaner",
                            Requirement = "No prior experience required, but attention to detail and reliability are essential.",
                            Salary = 1500m,
                            Title = "Bartender"
                        },
                        new
                        {
                            Id = 9,
                            AverageStarRating = 3.3999999999999999,
                            CompanyId = "eb1f5c9f-186b-4a93-a9bd-64a6055c61cd",
                            Description = "Provide excellent customer service by taking orders, serving food and beverages, and ensuring customer satisfaction.",
                            IsDeleted = false,
                            JobType = 1,
                            Location = "Bulgaria, Sliven,bul. \"Tsar Osvoboditel\" 15А",
                            Position = "Restaurant Waiter",
                            Requirement = "Good communication skills and a friendly attitude. No prior experience required.",
                            Salary = 2000m,
                            Title = "Waiter"
                        },
                        new
                        {
                            Id = 10,
                            AverageStarRating = 4.9000000000000004,
                            CompanyId = "7dbc12c7-18ec-4af2-a5b7-877ff0df3faf",
                            Description = "Write engaging articles, blogs, and web content for clients across various industries.",
                            IsDeleted = false,
                            JobType = 0,
                            Location = "Remote",
                            Position = "Freelance Writer",
                            Requirement = "Excellent writing skills and creativity. Portfolio preferred.",
                            Salary = 5000m,
                            Title = "Content Writer"
                        },
                        new
                        {
                            Id = 11,
                            AverageStarRating = 3.7000000000000002,
                            CompanyId = "7dbc12c7-18ec-4af2-a5b7-877ff0df3faf",
                            Description = "Edit and enhance video content, add transitions, effects, and soundtracks to create high-quality productions.",
                            IsDeleted = false,
                            JobType = 0,
                            Location = "Remote",
                            Position = "Freelance Video Editor",
                            Requirement = "Proficiency in video editing software such as Adobe Premiere Pro, Final Cut Pro, or DaVinci Resolve. Portfolio required.",
                            Salary = 6000m,
                            Title = "Video Editor"
                        },
                        new
                        {
                            Id = 12,
                            AverageStarRating = 4.0999999999999996,
                            CompanyId = "b3693b0c-9c11-48ee-a3be-db37d5439ab0",
                            Description = "Assist in developing, testing, and debugging software applications under the guidance of senior developers.",
                            IsDeleted = false,
                            JobType = 2,
                            Location = "Bulgaria, Varna, bul. \"8-mi Primorski polk\" 54",
                            Position = "Software Developer Intern",
                            Requirement = "Enrolled in a Computer Science or related degree program. Basic knowledge of programming languages such as Python or Java.",
                            Salary = 500m,
                            Title = "Software Development Intern"
                        },
                        new
                        {
                            Id = 13,
                            AverageStarRating = 3.7999999999999998,
                            CompanyId = "b3693b0c-9c11-48ee-a3be-db37d5439ab0",
                            Description = "Assist the design team in creating visual assets, including social media graphics, marketing materials, and presentations.",
                            IsDeleted = false,
                            JobType = 2,
                            Location = "Bulgaria, Sofia, ul. \"Munchen\" 14",
                            Position = "Graphic Design Intern",
                            Requirement = "Enrolled in a Graphic Design or related program. Proficiency in design software such as Adobe Illustrator and Photoshop is preferred.",
                            Salary = 700m,
                            Title = "Graphic Design Intern"
                        },
                        new
                        {
                            Id = 14,
                            AverageStarRating = 3.8999999999999999,
                            CompanyId = "17585a62-c173-4c68-9e4a-2ba93a419b21",
                            Description = "Assist pharmacists with dispensing medication, preparing prescriptions, managing inventory, and providing customer service under supervision.",
                            IsDeleted = false,
                            JobType = 2,
                            Location = "Bulgaria, Ruse, bul. \"Lipnik\" 8",
                            Position = "Pharmacy Intern",
                            Requirement = "Currently enrolled in a Pharmacy or Pharmaceutical Sciences program. Strong attention to detail and communication skills.",
                            Salary = 900m,
                            Title = "Pharmacy Intern"
                        },
                        new
                        {
                            Id = 15,
                            AverageStarRating = 4.0999999999999996,
                            CompanyId = "17585a62-c173-4c68-9e4a-2ba93a419b21",
                            Description = "Provide medical care related to women's health, including diagnosis, treatment, and prevention of reproductive health issues, as well as conducting gynecological exams and procedures.",
                            IsDeleted = false,
                            JobType = 1,
                            Location = "Bulgaria, Ruse, bul. \"Lipnik\" 8",
                            Position = "Certified Gynecologist",
                            Requirement = "Medical degree with specialization in gynecology. Valid state medical license required.",
                            Salary = 13000m,
                            Title = "Gynecologist"
                        });
                });

            modelBuilder.Entity("PathFinder.Data.Models.JobSphere", b =>
                {
                    b.Property<int>("JobId")
                        .HasColumnType("int")
                        .HasComment("Job's foreign key");

                    b.Property<int>("SphereId")
                        .HasColumnType("int")
                        .HasComment("Sphere's foreign key");

                    b.Property<int?>("JobId1")
                        .HasColumnType("int");

                    b.Property<int?>("SphereId1")
                        .HasColumnType("int");

                    b.HasKey("JobId", "SphereId");

                    b.HasIndex("JobId1");

                    b.HasIndex("SphereId");

                    b.HasIndex("SphereId1");

                    b.ToTable("JobsSpheres", t =>
                        {
                            t.HasComment("Jobs' spheres");
                        });

                    b.HasData(
                        new
                        {
                            JobId = 1,
                            SphereId = 2
                        },
                        new
                        {
                            JobId = 1,
                            SphereId = 6
                        },
                        new
                        {
                            JobId = 1,
                            SphereId = 12
                        },
                        new
                        {
                            JobId = 1,
                            SphereId = 13
                        },
                        new
                        {
                            JobId = 1,
                            SphereId = 46
                        },
                        new
                        {
                            JobId = 2,
                            SphereId = 5
                        },
                        new
                        {
                            JobId = 2,
                            SphereId = 7
                        },
                        new
                        {
                            JobId = 2,
                            SphereId = 15
                        },
                        new
                        {
                            JobId = 3,
                            SphereId = 16
                        },
                        new
                        {
                            JobId = 3,
                            SphereId = 17
                        },
                        new
                        {
                            JobId = 3,
                            SphereId = 18
                        },
                        new
                        {
                            JobId = 3,
                            SphereId = 59
                        },
                        new
                        {
                            JobId = 4,
                            SphereId = 17
                        },
                        new
                        {
                            JobId = 4,
                            SphereId = 19
                        },
                        new
                        {
                            JobId = 5,
                            SphereId = 16
                        },
                        new
                        {
                            JobId = 5,
                            SphereId = 1
                        },
                        new
                        {
                            JobId = 5,
                            SphereId = 18
                        },
                        new
                        {
                            JobId = 5,
                            SphereId = 2
                        },
                        new
                        {
                            JobId = 5,
                            SphereId = 24
                        },
                        new
                        {
                            JobId = 5,
                            SphereId = 50
                        },
                        new
                        {
                            JobId = 5,
                            SphereId = 25
                        },
                        new
                        {
                            JobId = 6,
                            SphereId = 4
                        },
                        new
                        {
                            JobId = 6,
                            SphereId = 58
                        },
                        new
                        {
                            JobId = 7,
                            SphereId = 17
                        },
                        new
                        {
                            JobId = 7,
                            SphereId = 18
                        },
                        new
                        {
                            JobId = 7,
                            SphereId = 31
                        },
                        new
                        {
                            JobId = 8,
                            SphereId = 17
                        },
                        new
                        {
                            JobId = 8,
                            SphereId = 35
                        },
                        new
                        {
                            JobId = 8,
                            SphereId = 38
                        },
                        new
                        {
                            JobId = 9,
                            SphereId = 17
                        },
                        new
                        {
                            JobId = 9,
                            SphereId = 59
                        },
                        new
                        {
                            JobId = 10,
                            SphereId = 5
                        },
                        new
                        {
                            JobId = 10,
                            SphereId = 45
                        },
                        new
                        {
                            JobId = 10,
                            SphereId = 40
                        },
                        new
                        {
                            JobId = 10,
                            SphereId = 36
                        },
                        new
                        {
                            JobId = 11,
                            SphereId = 5
                        },
                        new
                        {
                            JobId = 11,
                            SphereId = 7
                        },
                        new
                        {
                            JobId = 11,
                            SphereId = 36
                        },
                        new
                        {
                            JobId = 11,
                            SphereId = 2
                        },
                        new
                        {
                            JobId = 11,
                            SphereId = 40
                        },
                        new
                        {
                            JobId = 11,
                            SphereId = 44
                        },
                        new
                        {
                            JobId = 11,
                            SphereId = 45
                        },
                        new
                        {
                            JobId = 11,
                            SphereId = 48
                        },
                        new
                        {
                            JobId = 12,
                            SphereId = 2
                        },
                        new
                        {
                            JobId = 12,
                            SphereId = 6
                        },
                        new
                        {
                            JobId = 12,
                            SphereId = 12
                        },
                        new
                        {
                            JobId = 12,
                            SphereId = 13
                        },
                        new
                        {
                            JobId = 13,
                            SphereId = 5
                        },
                        new
                        {
                            JobId = 13,
                            SphereId = 7
                        },
                        new
                        {
                            JobId = 13,
                            SphereId = 12
                        },
                        new
                        {
                            JobId = 13,
                            SphereId = 6
                        },
                        new
                        {
                            JobId = 14,
                            SphereId = 24
                        },
                        new
                        {
                            JobId = 14,
                            SphereId = 18
                        },
                        new
                        {
                            JobId = 14,
                            SphereId = 26
                        },
                        new
                        {
                            JobId = 14,
                            SphereId = 1
                        },
                        new
                        {
                            JobId = 14,
                            SphereId = 49
                        },
                        new
                        {
                            JobId = 15,
                            SphereId = 52
                        },
                        new
                        {
                            JobId = 15,
                            SphereId = 18
                        },
                        new
                        {
                            JobId = 15,
                            SphereId = 50
                        },
                        new
                        {
                            JobId = 15,
                            SphereId = 51
                        },
                        new
                        {
                            JobId = 15,
                            SphereId = 24
                        },
                        new
                        {
                            JobId = 15,
                            SphereId = 1
                        });
                });

            modelBuilder.Entity("PathFinder.Data.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Review's idetifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(750)
                        .HasColumnType("nvarchar(750)")
                        .HasComment("Comment");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasComment("Course's foreign key");

                    b.Property<int?>("JobId")
                        .HasColumnType("int")
                        .HasComment("Job's foreign key");

                    b.Property<string>("PublisherId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Publisher's foreign key");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2")
                        .HasComment("Review's date");

                    b.Property<int?>("StarRating")
                        .HasColumnType("int")
                        .HasComment("Review's star rating");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("JobId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "Working as a gynecologist here has been incredibly rewarding. The medical team is highly supportive, and I feel that my skills are valued. The clinic provides a great work-life balance, and there are plenty of opportunities for professional development.",
                            JobId = 15,
                            PublisherId = "e8d223af-7285-41c5-8c38-9e6989d4410d",
                            ReviewDate = new DateTime(2024, 12, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StarRating = 5
                        },
                        new
                        {
                            Id = 2,
                            Comment = "The work environment is stressful, with a high patient load and not enough time to give each patient the attention they deserve. There is little room for advancement, and management is not supportive of new ideas or improvements.",
                            JobId = 15,
                            PublisherId = "ca145762-b5db-4836-b963-85eff67fb124",
                            ReviewDate = new DateTime(2024, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StarRating = 2
                        },
                        new
                        {
                            Id = 3,
                            Comment = "Working as a hairdresser here has been a fantastic experience. The team is supportive, and I’ve learned so much from the senior stylists. The work environment is welcoming, and there’s plenty of opportunity for professional growth.",
                            JobId = 3,
                            PublisherId = "b93fa043-cdea-4bd9-9d0b-7b16ee7c5355",
                            ReviewDate = new DateTime(2024, 12, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StarRating = 5
                        },
                        new
                        {
                            Id = 4,
                            Comment = "The job can be physically demanding, and the work environment is often chaotic. There’s a lack of clear communication from management, and the hours can be long with not enough time to properly address every vehicle. The pay doesn’t reflect the workload.",
                            JobId = 4,
                            PublisherId = "7d089603-dc80-415a-913b-f24b1a90b5f1",
                            ReviewDate = new DateTime(2024, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StarRating = 2
                        },
                        new
                        {
                            Id = 5,
                            Comment = "Working as a software developer here has been an incredibly rewarding experience. The company fosters a collaborative work environment, and I’ve had the opportunity to work on cutting-edge technologies. There’s a great work-life balance, and management supports continuous learning.",
                            JobId = 1,
                            PublisherId = "b93fa043-cdea-4bd9-9d0b-7b16ee7c5355",
                            ReviewDate = new DateTime(2024, 11, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StarRating = 5
                        },
                        new
                        {
                            Id = 6,
                            Comment = "The job is physically demanding, and there is often a lack of support from management. The hours can be inconsistent, and the workload can sometimes feel overwhelming with little recognition. The communication about tasks and expectations could be improved.",
                            JobId = 7,
                            PublisherId = "9e547484-9ea8-45e6-a488-d657f6f1c598",
                            ReviewDate = new DateTime(2024, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StarRating = 2
                        },
                        new
                        {
                            Id = 7,
                            Comment = "The English learning course is extremely well-structured. The lessons are engaging, and the instructors are knowledgeable and supportive. It has greatly improved my language skills, and I feel more confident speaking and writing in English.",
                            CourseId = 8,
                            PublisherId = "e47b8b58-2e3a-4f02-aee5-485d3e6db2b2",
                            ReviewDate = new DateTime(2024, 8, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StarRating = 4
                        },
                        new
                        {
                            Id = 8,
                            Comment = "The course lacks personalized attention, and the pace can be too fast for beginners. The materials feel outdated, and there aren't enough interactive elements to keep learners engaged. It didn’t meet my expectations.",
                            JobId = 8,
                            PublisherId = "9e547484-9ea8-45e6-a488-d657f6f1c598",
                            ReviewDate = new DateTime(2024, 11, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StarRating = 4
                        },
                        new
                        {
                            Id = 9,
                            Comment = "The web development exceeded my expectations. The curriculum is comprehensive, and the instructors are very knowledgeable. I gained practical coding skills and was able to work on real-world projects. Highly recommended!",
                            JobId = 2,
                            PublisherId = "e8d223af-7285-41c5-8c38-9e6989d4410d",
                            ReviewDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StarRating = 5
                        },
                        new
                        {
                            Id = 10,
                            Comment = "The course was too basic for my expectations. It focused a lot on introductory concepts, with very little in-depth coverage of advanced topics. I also found the pacing to be too slow, and some of the exercises were not as challenging as I had hoped.",
                            JobId = 4,
                            PublisherId = "9e547484-9ea8-45e6-a488-d657f6f1c598",
                            ReviewDate = new DateTime(2024, 2, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StarRating = 2
                        },
                        new
                        {
                            Id = 11,
                            Comment = "This Fine Art course was amazing! The instructors were incredibly talented and offered personalized feedback. The course covered a variety of techniques and mediums, which really helped me improve my skills. The hands-on approach and creative atmosphere made learning fun and engaging.",
                            JobId = 9,
                            PublisherId = "ca145762-b5db-4836-b963-85eff67fb124",
                            ReviewDate = new DateTime(2024, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StarRating = 4
                        },
                        new
                        {
                            Id = 12,
                            Comment = "The Spanish class was an incredible experience! The teacher was engaging and patient, making learning enjoyable. The lessons were interactive, and the class size was perfect for personalized attention. I feel much more confident in speaking and understanding Spanish after completing the course.",
                            JobId = 5,
                            PublisherId = "ca145762-b5db-4836-b963-85eff67fb124",
                            ReviewDate = new DateTime(2023, 7, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StarRating = 5
                        });
                });

            modelBuilder.Entity("PathFinder.Data.Models.Sphere", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Sphere's identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Sphere");

                    b.HasKey("Id");

                    b.ToTable("Spheres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Healthcare"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Technology"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Business & Finance"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Education"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Creative Arts"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Computer Science"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Graphic Design"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Marketing & Management"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Architecture"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Facility Management"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Engineering"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Web Development"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Back-End Programming"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Front-End Programming"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Adobe Designing"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Beauty and Personal Care Industry"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Service Industry"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Health and Wellness Industry"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Automotive Industry"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Mechanical Engineering"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Transportation and Logistics"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Skilled Trades"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Sustainability and Green Technologies"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Medical Specialties"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Cosmetic Dermatology"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Pharmaceutical Industry"
                        },
                        new
                        {
                            Id = 27,
                            Name = "STEM Education"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Public Sector"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Curriculum Development"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Non-profit Education"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Cleaning and Maintenance"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Public Services"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Environmental Services"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Education Support Services"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Food and Beverage Services"
                        },
                        new
                        {
                            Id = 36,
                            Name = "Customer Service"
                        },
                        new
                        {
                            Id = 37,
                            Name = "Event Management"
                        },
                        new
                        {
                            Id = 38,
                            Name = "Nightlife and Entertainment"
                        },
                        new
                        {
                            Id = 39,
                            Name = "Tourism and Leisure"
                        },
                        new
                        {
                            Id = 40,
                            Name = "Media and Journalism"
                        },
                        new
                        {
                            Id = 41,
                            Name = "Marketing & Communications"
                        },
                        new
                        {
                            Id = 42,
                            Name = "Digital Marketing"
                        },
                        new
                        {
                            Id = 43,
                            Name = "Freelancing"
                        },
                        new
                        {
                            Id = 44,
                            Name = "Film Production"
                        },
                        new
                        {
                            Id = 45,
                            Name = "Media and Entertainment"
                        },
                        new
                        {
                            Id = 46,
                            Name = "Software Development"
                        },
                        new
                        {
                            Id = 47,
                            Name = "Security"
                        },
                        new
                        {
                            Id = 48,
                            Name = "Visual Arts"
                        },
                        new
                        {
                            Id = 49,
                            Name = "Retail Pharmacy"
                        },
                        new
                        {
                            Id = 50,
                            Name = "Clinical Care"
                        },
                        new
                        {
                            Id = 51,
                            Name = "Reproductive Health"
                        },
                        new
                        {
                            Id = 52,
                            Name = "Women’s Health"
                        },
                        new
                        {
                            Id = 53,
                            Name = "Cosmetic Surgery"
                        },
                        new
                        {
                            Id = 54,
                            Name = "Spa and Wellness"
                        },
                        new
                        {
                            Id = 55,
                            Name = "Personal Grooming"
                        },
                        new
                        {
                            Id = 56,
                            Name = "Salon Management"
                        },
                        new
                        {
                            Id = 57,
                            Name = "Hairdressing and Styling"
                        },
                        new
                        {
                            Id = 58,
                            Name = "Mathematics"
                        },
                        new
                        {
                            Id = 59,
                            Name = "Restaurant Hospitality"
                        },
                        new
                        {
                            Id = 60,
                            Name = "Cultural Studies"
                        },
                        new
                        {
                            Id = 61,
                            Name = "Language & Linguistics"
                        },
                        new
                        {
                            Id = 62,
                            Name = "Cooking"
                        },
                        new
                        {
                            Id = 63,
                            Name = "Physical Education"
                        },
                        new
                        {
                            Id = 64,
                            Name = "Fitness and Personal Training"
                        },
                        new
                        {
                            Id = 65,
                            Name = "Audio Engineering"
                        },
                        new
                        {
                            Id = 66,
                            Name = "Music Composition"
                        },
                        new
                        {
                            Id = 67,
                            Name = "Music Technology"
                        });
                });

            modelBuilder.Entity("PathFinder.Data.Models.UserCourse", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User's foreign key");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasComment("Course's foreign key");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CourseId1")
                        .HasColumnType("int");

                    b.HasKey("UserId", "CourseId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CourseId");

                    b.HasIndex("CourseId1");

                    b.ToTable("UsersCourses", t =>
                        {
                            t.HasComment("Users' courses");
                        });

                    b.HasData(
                        new
                        {
                            UserId = "e47b8b58-2e3a-4f02-aee5-485d3e6db2b2",
                            CourseId = 5
                        },
                        new
                        {
                            UserId = "9e547484-9ea8-45e6-a488-d657f6f1c598",
                            CourseId = 16
                        });
                });

            modelBuilder.Entity("PathFinder.Data.Models.UserJob", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User's foreign key");

                    b.Property<int>("JobId")
                        .HasColumnType("int")
                        .HasComment("Job's foreign key");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("JobId1")
                        .HasColumnType("int");

                    b.HasKey("UserId", "JobId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("JobId");

                    b.HasIndex("JobId1");

                    b.ToTable("UsersJobs", t =>
                        {
                            t.HasComment("Users' jobs");
                        });

                    b.HasData(
                        new
                        {
                            UserId = "e8d223af-7285-41c5-8c38-9e6989d4410d",
                            JobId = 1
                        },
                        new
                        {
                            UserId = "d444522c-71c1-4cc9-b815-4ea25a49f17b",
                            JobId = 2
                        });
                });

            modelBuilder.Entity("PathFinder.Data.Models.UserSphere", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User's foreign key");

                    b.Property<int>("SphereId")
                        .HasColumnType("int")
                        .HasComment("Sphere's foreign key");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("SphereId1")
                        .HasColumnType("int");

                    b.HasKey("UserId", "SphereId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("SphereId");

                    b.HasIndex("SphereId1");

                    b.ToTable("UsersSpheres", t =>
                        {
                            t.HasComment("Users' spheres");
                        });

                    b.HasData(
                        new
                        {
                            UserId = "e47b8b58-2e3a-4f02-aee5-485d3e6db2b2",
                            SphereId = 60
                        },
                        new
                        {
                            UserId = "e47b8b58-2e3a-4f02-aee5-485d3e6db2b2",
                            SphereId = 61
                        },
                        new
                        {
                            UserId = "e47b8b58-2e3a-4f02-aee5-485d3e6db2b2",
                            SphereId = 2
                        },
                        new
                        {
                            UserId = "9e547484-9ea8-45e6-a488-d657f6f1c598",
                            SphereId = 5
                        },
                        new
                        {
                            UserId = "9e547484-9ea8-45e6-a488-d657f6f1c598",
                            SphereId = 7
                        },
                        new
                        {
                            UserId = "9e547484-9ea8-45e6-a488-d657f6f1c598",
                            SphereId = 11
                        },
                        new
                        {
                            UserId = "e8d223af-7285-41c5-8c38-9e6989d4410d",
                            SphereId = 13
                        },
                        new
                        {
                            UserId = "e8d223af-7285-41c5-8c38-9e6989d4410d",
                            SphereId = 12
                        },
                        new
                        {
                            UserId = "e8d223af-7285-41c5-8c38-9e6989d4410d",
                            SphereId = 15
                        },
                        new
                        {
                            UserId = "d444522c-71c1-4cc9-b815-4ea25a49f17b",
                            SphereId = 35
                        },
                        new
                        {
                            UserId = "d444522c-71c1-4cc9-b815-4ea25a49f17b",
                            SphereId = 38
                        },
                        new
                        {
                            UserId = "d444522c-71c1-4cc9-b815-4ea25a49f17b",
                            SphereId = 40
                        },
                        new
                        {
                            UserId = "b93fa043-cdea-4bd9-9d0b-7b16ee7c5355",
                            SphereId = 58
                        },
                        new
                        {
                            UserId = "b93fa043-cdea-4bd9-9d0b-7b16ee7c5355",
                            SphereId = 59
                        },
                        new
                        {
                            UserId = "b93fa043-cdea-4bd9-9d0b-7b16ee7c5355",
                            SphereId = 60
                        },
                        new
                        {
                            UserId = "7d089603-dc80-415a-913b-f24b1a90b5f1",
                            SphereId = 61
                        },
                        new
                        {
                            UserId = "7d089603-dc80-415a-913b-f24b1a90b5f1",
                            SphereId = 64
                        },
                        new
                        {
                            UserId = "7d089603-dc80-415a-913b-f24b1a90b5f1",
                            SphereId = 66
                        },
                        new
                        {
                            UserId = "ca145762-b5db-4836-b963-85eff67fb124",
                            SphereId = 61
                        },
                        new
                        {
                            UserId = "ca145762-b5db-4836-b963-85eff67fb124",
                            SphereId = 15
                        },
                        new
                        {
                            UserId = "ca145762-b5db-4836-b963-85eff67fb124",
                            SphereId = 52
                        },
                        new
                        {
                            UserId = "8d0c3b82-be4b-4fdf-834a-8e436176d9bd",
                            SphereId = 13
                        },
                        new
                        {
                            UserId = "8d0c3b82-be4b-4fdf-834a-8e436176d9bd",
                            SphereId = 15
                        },
                        new
                        {
                            UserId = "8d0c3b82-be4b-4fdf-834a-8e436176d9bd",
                            SphereId = 62
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PathFinder.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PathFinder.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PathFinder.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PathFinder.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PathFinder.Data.Models.Course", b =>
                {
                    b.HasOne("PathFinder.Data.Models.ApplicationUser", "Institution")
                        .WithMany("Course")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("PathFinder.Data.Models.CourseSphere", b =>
                {
                    b.HasOne("PathFinder.Data.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PathFinder.Data.Models.Course", null)
                        .WithMany("CoursesSpheres")
                        .HasForeignKey("CourseId1");

                    b.HasOne("PathFinder.Data.Models.Sphere", "Sphere")
                        .WithMany()
                        .HasForeignKey("SphereId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PathFinder.Data.Models.Sphere", null)
                        .WithMany("CoursesSpheres")
                        .HasForeignKey("SphereId1");

                    b.Navigation("Course");

                    b.Navigation("Sphere");
                });

            modelBuilder.Entity("PathFinder.Data.Models.Job", b =>
                {
                    b.HasOne("PathFinder.Data.Models.ApplicationUser", "Company")
                        .WithMany("Jobs")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("PathFinder.Data.Models.JobSphere", b =>
                {
                    b.HasOne("PathFinder.Data.Models.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PathFinder.Data.Models.Job", null)
                        .WithMany("JobsSpheres")
                        .HasForeignKey("JobId1");

                    b.HasOne("PathFinder.Data.Models.Sphere", "Sphere")
                        .WithMany()
                        .HasForeignKey("SphereId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PathFinder.Data.Models.Sphere", null)
                        .WithMany("JobsSpheres")
                        .HasForeignKey("SphereId1");

                    b.Navigation("Job");

                    b.Navigation("Sphere");
                });

            modelBuilder.Entity("PathFinder.Data.Models.Review", b =>
                {
                    b.HasOne("PathFinder.Data.Models.Course", "Course")
                        .WithMany("Reviews")
                        .HasForeignKey("CourseId");

                    b.HasOne("PathFinder.Data.Models.Job", "Job")
                        .WithMany("Reviews")
                        .HasForeignKey("JobId");

                    b.HasOne("PathFinder.Data.Models.ApplicationUser", "Publisher")
                        .WithMany("Reviews")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Job");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("PathFinder.Data.Models.UserCourse", b =>
                {
                    b.HasOne("PathFinder.Data.Models.ApplicationUser", null)
                        .WithMany("UsersCourses")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("PathFinder.Data.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PathFinder.Data.Models.Course", null)
                        .WithMany("UsersCourses")
                        .HasForeignKey("CourseId1");

                    b.HasOne("PathFinder.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PathFinder.Data.Models.UserJob", b =>
                {
                    b.HasOne("PathFinder.Data.Models.ApplicationUser", null)
                        .WithMany("UsersJobs")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("PathFinder.Data.Models.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PathFinder.Data.Models.Job", null)
                        .WithMany("UsersJobs")
                        .HasForeignKey("JobId1");

                    b.HasOne("PathFinder.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PathFinder.Data.Models.UserSphere", b =>
                {
                    b.HasOne("PathFinder.Data.Models.ApplicationUser", null)
                        .WithMany("UsersSpheres")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("PathFinder.Data.Models.Sphere", "Sphere")
                        .WithMany()
                        .HasForeignKey("SphereId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PathFinder.Data.Models.Sphere", null)
                        .WithMany("UsersSpheres")
                        .HasForeignKey("SphereId1");

                    b.HasOne("PathFinder.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Sphere");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PathFinder.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Course");

                    b.Navigation("Jobs");

                    b.Navigation("Reviews");

                    b.Navigation("UsersCourses");

                    b.Navigation("UsersJobs");

                    b.Navigation("UsersSpheres");
                });

            modelBuilder.Entity("PathFinder.Data.Models.Course", b =>
                {
                    b.Navigation("CoursesSpheres");

                    b.Navigation("Reviews");

                    b.Navigation("UsersCourses");
                });

            modelBuilder.Entity("PathFinder.Data.Models.Job", b =>
                {
                    b.Navigation("JobsSpheres");

                    b.Navigation("Reviews");

                    b.Navigation("UsersJobs");
                });

            modelBuilder.Entity("PathFinder.Data.Models.Sphere", b =>
                {
                    b.Navigation("CoursesSpheres");

                    b.Navigation("JobsSpheres");

                    b.Navigation("UsersSpheres");
                });
#pragma warning restore 612, 618
        }
    }
}
