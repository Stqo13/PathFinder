// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PathFinder.Data;

#nullable disable

namespace PathFinder.Data.Migrations
{
    [DbContext(typeof(PathFinderDbContext))]
    [Migration("20250308191056_ColumnRemovedFromUserJob")]
    partial class ColumnRemovedFromUserJob
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a94e9744-895c-4cd0-a450-fb2ca5ea73dc",
                            ConcurrencyStamp = "eab4d980-d470-4b4b-bb99-6768a6d7a63d",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "cbd2b782-e4e3-4f79-84aa-5685d13320cb",
                            ConcurrencyStamp = "4eab5cb1-b6fc-42f3-9f01-93b0625f85b6",
                            Name = "PFUser",
                            NormalizedName = "PFUSER"
                        },
                        new
                        {
                            Id = "b69f39cc-e6e4-4394-b488-0d24c1d546ff",
                            ConcurrencyStamp = "9277a98f-3549-49fd-bb18-9810182b5e8d",
                            Name = "Company",
                            NormalizedName = "COMPANY"
                        },
                        new
                        {
                            Id = "be759a02-939c-4bb6-9063-f25e020d8a56",
                            ConcurrencyStamp = "5b72d0bc-f750-402f-a330-7ebded6824b3",
                            Name = "Institution",
                            NormalizedName = "INSTITUTION"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PathFinder.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("User's address");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasComment("User's date of birth");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasComment("User's first name");

                    b.Property<string>("LastName")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasComment("User's last name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "6a358b17-ffbe-4ac9-8d20-92544e3b739d",
                            AccessFailedCount = 0,
                            Address = "България, Русе, ул. \"Христо Ясенов\" 7",
                            ConcurrencyStamp = "d4c603ba-e5a9-42b8-91a1-3b25eaca8c5c",
                            DateOfBirth = new DateTime(1994, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "artacademy@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "ArtAcademy",
                            LastName = "OOD",
                            LockoutEnabled = false,
                            NormalizedEmail = "ARTACADEMY@GMAIL.COM",
                            NormalizedUserName = "ARTACADEMY123",
                            PasswordHash = "AQAAAAIAAYagAAAAEMqv85i3pLacgxJmO8TnP/AA+WaIy+BvtcozWClBBSAUt4wDYFariEWCmKDUpBuGjg==",
                            PhoneNumber = "0897902119",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "cf230457-1b88-4cf5-9c19-284a2fde1b33",
                            TwoFactorEnabled = true,
                            UserName = "artacademy123"
                        },
                        new
                        {
                            Id = "fc7c5678-22b4-4650-af6e-4c5f90fa494d",
                            AccessFailedCount = 0,
                            Address = "България, София, ул. \"Цар Асен\" 112",
                            ConcurrencyStamp = "dd060dc2-748f-4834-a812-41001fdc29e7",
                            DateOfBirth = new DateTime(1994, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "globallingua@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "GlobalLingua",
                            LastName = "OOD",
                            LockoutEnabled = false,
                            NormalizedEmail = "GLOBALLINGUA@GMAIL.COM",
                            NormalizedUserName = "GLOBALLINGUA123",
                            PasswordHash = "AQAAAAIAAYagAAAAEHEllhJ66vBMbtYs8yTMTSkxZxIyc5atT3grBPmRsg0hu6sE091XdQeyx30o55Zg8g==",
                            PhoneNumber = "0897662398",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "77813133-01a8-4d04-a1f1-28e5283fcffa",
                            TwoFactorEnabled = true,
                            UserName = "globallingua123"
                        },
                        new
                        {
                            Id = "723444b3-9434-4465-9044-f7e04fdcca2f",
                            AccessFailedCount = 0,
                            Address = "България, София, ул. \"Петър Б. Величков\" 43",
                            ConcurrencyStamp = "b8141e0f-55af-4f85-aed8-8445eaa25bb4",
                            DateOfBirth = new DateTime(1990, 6, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "marketingacademy@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Marketing Academy",
                            LastName = "OOD",
                            LockoutEnabled = false,
                            NormalizedEmail = "MARKETINGACADEMY@GMAIL.COM",
                            NormalizedUserName = "MARKETINGACADEMY123",
                            PasswordHash = "AQAAAAIAAYagAAAAEBFLqmSVU6kfhLZldYoRYCT0tgRCOJb0mtsAejjJxshGpsogEWPRD/10NS/y+mQYZQ==",
                            PhoneNumber = "0877742199",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "e200d58e-e155-43e2-85f4-d431d45e8cce",
                            TwoFactorEnabled = true,
                            UserName = "marketingacademy123"
                        },
                        new
                        {
                            Id = "428bcf46-40f2-47b2-ac4a-a49f570178ad",
                            AccessFailedCount = 0,
                            Address = "България, София, бул. \"Александър Малинов\" 78",
                            ConcurrencyStamp = "e5bed9d8-a346-41f1-825f-4cc2efbb07bd",
                            DateOfBirth = new DateTime(2000, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "softschool@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "SoftSchool",
                            LastName = "AD",
                            LockoutEnabled = false,
                            NormalizedEmail = "SOFTSCHOOL@GMAIL.COM",
                            NormalizedUserName = "SOFTSCHOOL123",
                            PasswordHash = "AQAAAAIAAYagAAAAEKnBm/hgRw7anywhp7MjCiYCjxEPE9gzNGZFPdnjT6nDmNfVUmAXaMKM3yZ8HotKeQ==",
                            PhoneNumber = "0878765781",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "bbfdc91b-a3ee-4465-9eba-6d16c7f173b4",
                            TwoFactorEnabled = true,
                            UserName = "softschool123"
                        },
                        new
                        {
                            Id = "3cf3fb4a-235e-4c93-b66f-c1557006e067",
                            AccessFailedCount = 0,
                            Address = "България, Пловдив, бул. \"Цар Борис 3ти Обединител\"",
                            ConcurrencyStamp = "2e60627f-b88c-4be5-84b4-83114742bd33",
                            DateOfBirth = new DateTime(1980, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "telerikikus@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Telerikikus",
                            LastName = "OD",
                            LockoutEnabled = false,
                            NormalizedEmail = "TELERIKIKUS@GMAIL.COM",
                            NormalizedUserName = "TELERIKIKUS123",
                            PasswordHash = "AQAAAAIAAYagAAAAENh9Pcy15qXfy3neAWpR00NdpUXHTriQhSFsqZzo8c7rDBwv1B1TI0ZtYifKHAjvCA==",
                            PhoneNumber = "0898769871",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "88602962-15f6-4f88-830a-d7b9719226d9",
                            TwoFactorEnabled = true,
                            UserName = "telerikikus123"
                        },
                        new
                        {
                            Id = "fa360a62-9355-474a-824d-aaa85d9fbd65",
                            AccessFailedCount = 0,
                            Address = "България, Стара Загора, ул. \"Стефан Стамболов\" 38",
                            ConcurrencyStamp = "0061fde3-6a69-456a-8d94-a8c6cb624d95",
                            DateOfBirth = new DateTime(2001, 7, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "wittmath@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "WittMath",
                            LastName = "OOD",
                            LockoutEnabled = false,
                            NormalizedEmail = "WITTMATH@GMAIL.COM",
                            NormalizedUserName = "WITTMATH123",
                            PasswordHash = "AQAAAAIAAYagAAAAEEDxYktCnE0b6w8h3Ze23l7evxztNxsHEUk3Ig+LPh3uJ3thq40XM3AbHpEVWJ9VLQ==",
                            PhoneNumber = "0880796431",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "518fbfea-1835-44cd-9e72-4f6120f2218b",
                            TwoFactorEnabled = true,
                            UserName = "wittmath123"
                        },
                        new
                        {
                            Id = "35e6291c-73f5-48ef-8f3e-5fda2c4ddee1",
                            AccessFailedCount = 0,
                            Address = "България, Варна, ул. \"Оборище\" 13А",
                            ConcurrencyStamp = "36a7ace2-a055-4940-8e37-9f6592b80e66",
                            DateOfBirth = new DateTime(1991, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tastecraftacademy@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "TasteCraft Academy",
                            LastName = "OOD",
                            LockoutEnabled = false,
                            NormalizedEmail = "TASTECRAFTACADEMY@GMAIL.COM",
                            NormalizedUserName = "TASTECRAFTACADEMY123",
                            PasswordHash = "AQAAAAIAAYagAAAAEP2tFGbCYjZIg2gYmI12GcwPwSaGc0OG+mgnREhtxko4IuXKmr0jrPBc+ber26d+HQ==",
                            PhoneNumber = "0895002619",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "df5109a5-504b-4f40-a732-2de827827477",
                            TwoFactorEnabled = true,
                            UserName = "tastecraftacademy123"
                        },
                        new
                        {
                            Id = "e0d6328d-f003-4bb1-8daa-21dcf49db469",
                            AccessFailedCount = 0,
                            Address = "България, Плевен, ул. \"Васил Петлешков\" 6",
                            ConcurrencyStamp = "233e6bbe-e6e8-42b9-8674-aade48cd7a6f",
                            DateOfBirth = new DateTime(2002, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "chick@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Chic Cuts & Styles",
                            LastName = "ET",
                            LockoutEnabled = false,
                            NormalizedEmail = "CHIC@GMAIL.COM",
                            NormalizedUserName = "CHIC123",
                            PasswordHash = "AQAAAAIAAYagAAAAEJcA2vInYawI3sqkUHR7EEC9/7JbulNXlOCHfMdrQGQZeX/tSfPovPtlOEhOVuVd+w==",
                            PhoneNumber = "0898769871",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "6b7c3802-478d-4b51-ad31-bf10cface536",
                            TwoFactorEnabled = true,
                            UserName = "chic123"
                        },
                        new
                        {
                            Id = "eb1f5c9f-186b-4a93-a9bd-64a6055c61cd",
                            AccessFailedCount = 0,
                            Address = "България, Сливен, бул. \"Цар Освободител\" 15А",
                            ConcurrencyStamp = "865c3f44-4072-430c-b970-b878eddbea92",
                            DateOfBirth = new DateTime(2003, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "theurbangrillandbar@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "The Urban Grill & Bar",
                            LastName = "ET",
                            LockoutEnabled = false,
                            NormalizedEmail = "THEURBANGRILLANDBAR@GMAIL.COM",
                            NormalizedUserName = "THEURBANGRILLANDBAR123",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ+seOvzYrOYAQVi9aUZrBPqO6UmYekyiAWErtpMhrUPQ8PllLhvfAvPPx5nPx/eHg==",
                            PhoneNumber = "0878439866",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "3ee10e14-94fd-4158-9a13-3c5e1044ef27",
                            TwoFactorEnabled = true,
                            UserName = "theurbangrillandbar123"
                        },
                        new
                        {
                            Id = "7dbc12c7-18ec-4af2-a5b7-877ff0df3faf",
                            AccessFailedCount = 0,
                            Address = "България, Врана, ул. \"Козлодуй\" 4",
                            ConcurrencyStamp = "e312a43c-e4e1-49e3-9558-f5d68f00aa10",
                            DateOfBirth = new DateTime(2006, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "imaginationacademy@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Imagination Academy",
                            LastName = "OOD",
                            LockoutEnabled = false,
                            NormalizedEmail = "IMAGINATIONACADEMY@GMAIL.COM",
                            NormalizedUserName = "IMAGINATIONACADEMY123",
                            PasswordHash = "AQAAAAIAAYagAAAAEBXPDHmJHdfwGf/3c8oYt5wkBvjUDGjvzStgbC/PPd1HLOSxGBksJksCNtBW5vyDYw==",
                            PhoneNumber = "0878433392",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "218845a9-8ef1-47bd-b656-76dd51845f6e",
                            TwoFactorEnabled = true,
                            UserName = "imaginationacandemy123"
                        },
                        new
                        {
                            Id = "17585a62-c173-4c68-9e4a-2ba93a419b21",
                            AccessFailedCount = 0,
                            Address = "България, Русе, бул. \"Липник\" 8",
                            ConcurrencyStamp = "9aa02011-fb89-4e00-ac71-01377ebb3f6f",
                            DateOfBirth = new DateTime(1986, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "healthcarecentre@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "HealthCare Center",
                            LastName = "OD",
                            LockoutEnabled = false,
                            NormalizedEmail = "HEALTHCARECENTRE@GMAIL.COM",
                            NormalizedUserName = "HEALTHCARECENTRE123",
                            PasswordHash = "AQAAAAIAAYagAAAAEC0jLtbsbnSZb8/a2NDAnz+hYFJ8g8yTd+z7p2noKSnDhCoqZEVqJfXKpyZCgbRc6w==",
                            PhoneNumber = "0870063844",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "b25a0589-9950-48fb-8803-4d78dd122c7b",
                            TwoFactorEnabled = true,
                            UserName = "healthcarecentre123"
                        },
                        new
                        {
                            Id = "596c6add-eaae-4890-8d4d-38aa5a0671bd",
                            AccessFailedCount = 0,
                            Address = "България, Плевен, ул. \"Иван Вазов\"",
                            ConcurrencyStamp = "bf8a40b7-a6f7-4c64-b152-050001e840d6",
                            DateOfBirth = new DateTime(1985, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "primaryinovativeschool.com",
                            EmailConfirmed = true,
                            FirstName = "Primary Inovative School",
                            LastName = "ET",
                            LockoutEnabled = false,
                            NormalizedEmail = "PRIMARYINOVATIVESCHOOL@GMAIL.COM",
                            NormalizedUserName = "PRIMARYINOVATIVESCHOOL123",
                            PasswordHash = "AQAAAAIAAYagAAAAENPvPMr7brnm3hKrmPjbGBOrEXVbBpiofHimk9SGDDt9TZPUm3MpXYq7iQAYFhFseA==",
                            PhoneNumber = "0890811871",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "4193ee72-a24b-42e0-83f5-288f58be579a",
                            TwoFactorEnabled = true,
                            UserName = "primaryinovativeschool123"
                        },
                        new
                        {
                            Id = "16226cef-b670-447e-99a9-b627cb16ae0b",
                            AccessFailedCount = 0,
                            Address = "Bulgaria, Ruse, ул. \"Rila\" 5",
                            ConcurrencyStamp = "692d454a-face-415b-a951-1b5fe6240928",
                            DateOfBirth = new DateTime(2016, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sttuning@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "STTuning",
                            LastName = "OOD",
                            LockoutEnabled = false,
                            NormalizedEmail = "STTUNING@GMAIL.COM",
                            NormalizedUserName = "STTUNING123",
                            PasswordHash = "AQAAAAIAAYagAAAAEHzVWkrGv0fawkarWe5lTfobnYatpkpMKrF/a9RWpGXuRxv9By1MDuvEANK98hrzOw==",
                            PhoneNumber = "0876794891",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "ab4885cf-0bb4-4fd5-867c-99df1a961c14",
                            TwoFactorEnabled = true,
                            UserName = "sttuning123"
                        },
                        new
                        {
                            Id = "b3693b0c-9c11-48ee-a3be-db37d5439ab0",
                            AccessFailedCount = 0,
                            Address = "България, Русе, ул. \"Рила\" 5",
                            ConcurrencyStamp = "63e99c29-9a9b-4339-8390-9fac54fa1782",
                            DateOfBirth = new DateTime(1990, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "codecrafters@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "CodeCrafters",
                            LastName = "ET",
                            LockoutEnabled = false,
                            NormalizedEmail = "CODECRAFTERS@GMAIL.COM",
                            NormalizedUserName = "CODECRAFTERS123",
                            PasswordHash = "AQAAAAIAAYagAAAAEFYZ5CsihNcNQIkQs5mdBh7nf+f4Hj5e49dw8utB3TFFt73l83i3kHHQ8vyYvBACHg==",
                            PhoneNumber = "0877769431",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "9f1c2a57-cc63-4ece-9b4a-b217f9b53fa0",
                            TwoFactorEnabled = true,
                            UserName = "codecrafters123"
                        },
                        new
                        {
                            Id = "e2041514-c5ce-4e68-8956-f92298aa3b74",
                            AccessFailedCount = 0,
                            Address = "България, Казанлък, ул. \"Хемус\" 5",
                            ConcurrencyStamp = "b17d0ea9-9483-4c98-9be7-6abfcc3e0f1e",
                            DateOfBirth = new DateTime(2004, 12, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "teodoranedkova@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Теодора",
                            LastName = "Недкова",
                            LockoutEnabled = false,
                            NormalizedEmail = "TEODORANEDKOVA@GMAIL.COM",
                            NormalizedUserName = "TEODORANEDKOVA123",
                            PasswordHash = "AQAAAAIAAYagAAAAEKQFte2OtjYdsQekcgBFFU/WvwA7/RB3SYXKFcg9fphE+D0irshewzBchW5vfF8YDg==",
                            PhoneNumber = "0879859335",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "ddb4905a-e0b5-4499-958e-05aa3b283692",
                            TwoFactorEnabled = true,
                            UserName = "teodoranedkova123"
                        },
                        new
                        {
                            Id = "21b4ac01-42ec-4df2-b48c-ebe1cf26adf0",
                            AccessFailedCount = 0,
                            Address = "България, Казанлък, ул. \"Петко Стайнов\" 6",
                            ConcurrencyStamp = "5fb81921-d9d3-48dd-8b54-20a98ff358cd",
                            DateOfBirth = new DateTime(2004, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "stefandimitrov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Стефан",
                            LastName = "Димитров",
                            LockoutEnabled = false,
                            NormalizedEmail = "STEFANDIMITROV@GMAIL.COM",
                            NormalizedUserName = "STEFANDIMITROV123",
                            PasswordHash = "AQAAAAIAAYagAAAAEFuuG8kXf79UGmMV+vkBFJJdIGqFIddYT9atIbvDRGOoqxmsOuEteCW+jn8SI+9oxA==",
                            PhoneNumber = "0890854939",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "c8e9dfb0-1c04-4708-b922-5abdd49f4390",
                            TwoFactorEnabled = true,
                            UserName = "stefandimitrov123"
                        },
                        new
                        {
                            Id = "e47b8b58-2e3a-4f02-aee5-485d3e6db2b2",
                            AccessFailedCount = 0,
                            Address = "България, Казанлък, ул. \"Добри Чинтулов\" 5",
                            ConcurrencyStamp = "b0c9da92-1765-4e79-a01d-c828aff3d415",
                            DateOfBirth = new DateTime(2005, 5, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "alexstefanov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Алекс",
                            LastName = "Стефанов",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEXSTEFANOV@GMAIL.COM",
                            NormalizedUserName = "ALEXSTEFANOV123",
                            PasswordHash = "AQAAAAIAAYagAAAAEJg58x23iD92Q+I3toVOknAVHWN7sIcB+7ql8LBOHjRWhynH9w+F3JdUvb822r7Blw==",
                            PhoneNumber = "0883856039",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "2da3fd23-46ec-40b4-a400-7fd31f1e005e",
                            TwoFactorEnabled = true,
                            UserName = "alexstefanov123"
                        },
                        new
                        {
                            Id = "9e547484-9ea8-45e6-a488-d657f6f1c598",
                            AccessFailedCount = 0,
                            Address = "България, Казанлък, ул. \"Генерал Гурко\" 4",
                            ConcurrencyStamp = "0b00c02a-d7bb-4558-8e6a-9e184d82e189",
                            DateOfBirth = new DateTime(2002, 7, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "monikapetrova@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Моника",
                            LastName = "Петрова",
                            LockoutEnabled = false,
                            NormalizedEmail = "MONIKAPETROVA@GMAIL.COM",
                            NormalizedUserName = "MONIKAPETROVA123",
                            PasswordHash = "AQAAAAIAAYagAAAAEKMBfF7M19rWL0hTwziVlUhKdx9KHJMJubfKtM/O/MYfuMR852b9/0AfWe4on+GA0Q==",
                            PhoneNumber = "0898760394",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "7a5c9159-692e-4a0a-b4c0-7a7774812464",
                            TwoFactorEnabled = true,
                            UserName = "monikapetrova123"
                        },
                        new
                        {
                            Id = "e8d223af-7285-41c5-8c38-9e6989d4410d",
                            AccessFailedCount = 0,
                            Address = "България, Казанлък, ул. \"Генерал Стоянов\" 3",
                            ConcurrencyStamp = "018aae38-1749-4453-aa73-7bca5c07f84b",
                            DateOfBirth = new DateTime(2001, 8, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "iliqmilenov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Илия",
                            LastName = "Миленов",
                            LockoutEnabled = false,
                            NormalizedEmail = "ILIQMILENOV@GMAIL.COM",
                            NormalizedUserName = "ILIQMILENOV123",
                            PasswordHash = "AQAAAAIAAYagAAAAEAnLUbFIF6NhrYkkhZ1bZQKjdml3dN5nkLinEZNhfesUaxniYU1JWvqC+AgmI2MobQ==",
                            PhoneNumber = "0895068785",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "c1c1669b-3874-483f-b52e-949a29e0e934",
                            TwoFactorEnabled = true,
                            UserName = "iliqmilenov123"
                        },
                        new
                        {
                            Id = "d444522c-71c1-4cc9-b815-4ea25a49f17b",
                            AccessFailedCount = 0,
                            Address = "България, Казанлък, ул. \"Георги Сава Раковски\" 7",
                            ConcurrencyStamp = "ab31ee15-324f-421d-a32a-4e76c9cd11e3",
                            DateOfBirth = new DateTime(1998, 3, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "atanasgudov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Атанас",
                            LastName = "Гудов",
                            LockoutEnabled = false,
                            NormalizedEmail = "ATANASGUDOV@GMAIL.COM",
                            NormalizedUserName = "ATANASGUDOV123",
                            PasswordHash = "AQAAAAIAAYagAAAAEPKECWlxm+ByhycoW6PzgKTCQCe86xRSqxgoNXnt8e85y70xwDXEmipOBllOWbnwHg==",
                            PhoneNumber = "0885248739",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "095db0d1-5a8d-48b2-b70e-2c10f2034301",
                            TwoFactorEnabled = true,
                            UserName = "atanasgudov123"
                        },
                        new
                        {
                            Id = "b93fa043-cdea-4bd9-9d0b-7b16ee7c5355",
                            AccessFailedCount = 0,
                            Address = "България, Пловдив, ул. \"Георги Раковски\" 7",
                            ConcurrencyStamp = "a91708f1-b5ff-4ae9-9acd-4edac144f86c",
                            DateOfBirth = new DateTime(1989, 8, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "simonamincheva@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Симона",
                            LastName = "Минчева",
                            LockoutEnabled = false,
                            NormalizedEmail = "SIMONAMINCHEVA@GMAIL.COM",
                            NormalizedUserName = "SIMONAMINCHEVA123",
                            PasswordHash = "AQAAAAIAAYagAAAAEPh7kzUmhCkqZC9XeuypSjlYCdRxILBE9RaOJcACtusIgQmnyj3SXayXOCSy+TsTbA==",
                            PhoneNumber = "0897448199",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "c43d4cd8-dd04-4eeb-abc8-a3d2893cad06",
                            TwoFactorEnabled = true,
                            UserName = "simonamincheva123"
                        },
                        new
                        {
                            Id = "7d089603-dc80-415a-913b-f24b1a90b5f1",
                            AccessFailedCount = 0,
                            Address = "България, Плевен, ул. \"Хаджи Димитър\" 10",
                            ConcurrencyStamp = "54ec28f3-92eb-408a-a572-200060acf6d7",
                            DateOfBirth = new DateTime(1995, 2, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "georgivasilev@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Георги",
                            LastName = "Василев",
                            LockoutEnabled = false,
                            NormalizedEmail = "GEORGIVASILEV@GMAIL.COM",
                            NormalizedUserName = "GEORGIVASILEV123",
                            PasswordHash = "AQAAAAIAAYagAAAAEMTrTOQ2KyTo25/QmP8YFM/52F/Qa2We3J8/zpL6jIyDuZByKH3ClIrEqYEklGtpgg==",
                            PhoneNumber = "0804442391",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "9c96b9c9-3e23-4752-8d80-0fbb8e925958",
                            TwoFactorEnabled = true,
                            UserName = "georgivasilev123"
                        },
                        new
                        {
                            Id = "ca145762-b5db-4836-b963-85eff67fb124",
                            AccessFailedCount = 0,
                            Address = "България, Плевен, ул. \"Христо Ботев\" 4",
                            ConcurrencyStamp = "c5d4c5d5-ff5f-4ed7-be0a-4378db902935",
                            DateOfBirth = new DateTime(1999, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "krasimirdraganov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Krasimir",
                            LastName = "Draganov",
                            LockoutEnabled = false,
                            NormalizedEmail = "KRASIMIRDRAGANOV@GMAIL.COM",
                            NormalizedUserName = "KRASIMIRDRAGANOV123",
                            PasswordHash = "AQAAAAIAAYagAAAAEDLzx8BXUZF1EcWaefzyUWZQP5FCCH6hQmsyx41yHOp8aRjg6PfJbEBN6ZtIl9ESLQ==",
                            PhoneNumber = "0894555391",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "93a74424-02d3-42a5-8b13-32d12a34e85b",
                            TwoFactorEnabled = true,
                            UserName = "krasimirdraganov123"
                        },
                        new
                        {
                            Id = "8d0c3b82-be4b-4fdf-834a-8e436176d9bd",
                            AccessFailedCount = 0,
                            Address = "България, Плевен, ул. \"Стефан Караджа\" 6",
                            ConcurrencyStamp = "f8936e09-8574-4ddd-81bc-ef6ffddfb756",
                            DateOfBirth = new DateTime(1996, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "svetlingeorgiev@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Светлин",
                            LastName = "Георгиев",
                            LockoutEnabled = false,
                            NormalizedEmail = "SVETLINGEORGIEV@GMAIL.COM",
                            NormalizedUserName = "SVETLINGEORGIEV123",
                            PasswordHash = "AQAAAAIAAYagAAAAEG8lMlHGYoxpPSdxmrEG15vHmAFWv2upZCVh/hcOVzl5kWRW0BB8RncJpR0FapnVSA==",
                            PhoneNumber = "0894555881",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "6cdec12d-7b39-4fd1-9e5d-887afd6e0b4e",
                            TwoFactorEnabled = true,
                            UserName = "svetlingeorgiev123"
                        });
                });

            modelBuilder.Entity("PathFinder.Data.Models.CompanyRoleRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Company request identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Reasoning for the role request");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasComment("Role request sender username");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Role request sender id");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("Pending/Accepted/Declined request status");

                    b.HasKey("Id");

                    b.ToTable("CompanyRoleRequests");
                });

            modelBuilder.Entity("PathFinder.Data.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Course's identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("AverageStarRating")
                        .HasColumnType("float")
                        .HasComment("Course's average star rating");

                    b.Property<string>("Coordinates")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Longtitude and Latitude for the course's location");

                    b.Property<int>("CourseDuration")
                        .HasColumnType("int")
                        .HasComment("Course's duration in weeks");

                    b.Property<string>("Description")
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)")
                        .HasComment("Course's description");

                    b.Property<int>("DurationInMinutes")
                        .HasColumnType("int")
                        .HasComment("Course's lesson duration in minutes");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasComment("Couse's end date");

                    b.Property<string>("InstitutionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Institution's foreign key");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Course's location");

                    b.Property<int>("Mode")
                        .HasColumnType("int")
                        .HasComment("Course's mode(Online/In-person)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasComment("Course's name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Course's monthly price");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasComment("Couse's start date");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AverageStarRating = 4.0,
                            CourseDuration = 6,
                            Description = "Научете основите на дигиталния маркетинг, включително SEO, PPC и стратегии за социални медии.",
                            DurationInMinutes = 120,
                            EndDate = new DateTime(2027, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstitutionId = "723444b3-9434-4465-9044-f7e04fdcca2f",
                            IsDeleted = false,
                            Location = "Отдалечено",
                            Mode = 0,
                            Name = "Въведение в дигиталния маркетинг",
                            Price = 1900m,
                            StartDate = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            AverageStarRating = 4.5,
                            CourseDuration = 8,
                            Description = "Овладейте основите на HTML, CSS и JavaScript в този курс за начинаещи.",
                            DurationInMinutes = 150,
                            EndDate = new DateTime(2028, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstitutionId = "428bcf46-40f2-47b2-ac4a-a49f570178ad",
                            IsDeleted = false,
                            Location = "Отдалечено",
                            Mode = 0,
                            Name = "Уеб разработка за начинаещи",
                            Price = 1350m,
                            StartDate = new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            AverageStarRating = 4.7999999999999998,
                            CourseDuration = 4,
                            Description = "Запознайте се с науката за данни и научете алгоритмите на машинното обучение с Python и R.",
                            DurationInMinutes = 180,
                            EndDate = new DateTime(2029, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstitutionId = "3cf3fb4a-235e-4c93-b66f-c1557006e067",
                            IsDeleted = false,
                            Location = "Отдалечено",
                            Mode = 0,
                            Name = "Наука за данни и машинно обучение",
                            Price = 450m,
                            StartDate = new DateTime(2025, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            AverageStarRating = 4.7000000000000002,
                            CourseDuration = 7,
                            Description = "Получете основни познания за изкуствения интелект, неговите приложения и как променя индустриите.",
                            DurationInMinutes = 150,
                            EndDate = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstitutionId = "428bcf46-40f2-47b2-ac4a-a49f570178ad",
                            IsDeleted = false,
                            Location = "Отдалечено",
                            Mode = 0,
                            Name = "Въведение в изкуствения интелект",
                            Price = 1500m,
                            StartDate = new DateTime(2022, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            AverageStarRating = 4.5999999999999996,
                            Coordinates = "42.505681,27.458591",
                            CourseDuration = 9,
                            Description = "Овладейте основите на испанския език, включително лексика, граматика и разговорни умения в ангажираща и интерактивна среда.",
                            DurationInMinutes = 90,
                            EndDate = new DateTime(2030, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstitutionId = "fc7c5678-22b4-4650-af6e-4c5f90fa494d",
                            IsDeleted = false,
                            Location = "България, Бургас, ул. \"Одрин\" 2",
                            Mode = 1,
                            Name = "Испански за начинаещи",
                            Price = 2000m,
                            StartDate = new DateTime(2025, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            AverageStarRating = 4.7999999999999998,
                            Coordinates = "43.210532,27.907042",
                            CourseDuration = 10,
                            Description = "Научете основите на кулинарни техники, безопасност в кухнята и представяне на храна в този курс.",
                            DurationInMinutes = 120,
                            EndDate = new DateTime(2023, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstitutionId = "35e6291c-73f5-48ef-8f3e-5fda2c4ddee1",
                            IsDeleted = false,
                            Location = "България, Варна, ул. \"Оборище\" 13А",
                            Mode = 1,
                            Name = "Въведение в кулинарните изкуства",
                            Price = 2200m,
                            StartDate = new DateTime(2021, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            AverageStarRating = 4.5,
                            Coordinates = "42.195356,24.329969",
                            CourseDuration = 7,
                            Description = "Отпуснете се, възстановете и научете практики на осъзнатост заедно с йога пози за начинаещи в този курс.",
                            DurationInMinutes = 90,
                            EndDate = new DateTime(2025, 2, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstitutionId = "6a358b17-ffbe-4ac9-8d20-92544e3b739d",
                            IsDeleted = false,
                            Location = "България, Пазарджик, ул. \"Найден Геров\" 6",
                            Mode = 1,
                            Name = "Йога и осъзнатост за начинаещи",
                            Price = 1000m,
                            StartDate = new DateTime(2019, 2, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            AverageStarRating = 4.7000000000000002,
                            Coordinates = "42.61825,25.392292",
                            CourseDuration = 4,
                            Description = "Подобрете своите умения в английския език по говорене, слушане, четене и писане чрез практически уроци и упражнения.",
                            DurationInMinutes = 180,
                            EndDate = new DateTime(2025, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstitutionId = "fc7c5678-22b4-4650-af6e-4c5f90fa494d",
                            IsDeleted = false,
                            Location = "България, Казанлък, ул. \"Иван Вазов\" 3",
                            Mode = 1,
                            Name = "Майсторство в английския език",
                            Price = 900m,
                            StartDate = new DateTime(2025, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            AverageStarRating = 4.7999999999999998,
                            Coordinates = "42.687535,23.328508",
                            CourseDuration = 17,
                            Description = "Изследвайте основите на изящното изкуство, включително скициране, рисуване и скулптиране, в креативна работна среда.",
                            DurationInMinutes = 240,
                            EndDate = new DateTime(2025, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstitutionId = "6a358b17-ffbe-4ac9-8d20-92544e3b739d",
                            IsDeleted = false,
                            Location = "България, София, бул. Васил Левски 62",
                            Mode = 1,
                            Name = "Основи на изящното изкуство",
                            Price = 2500m,
                            StartDate = new DateTime(2022, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            AverageStarRating = 4.7999999999999998,
                            CourseDuration = 9,
                            Description = "Научете принципите на проектиране на вградени системи, микроконтролери и програмиране в реално време в този цялостен курс за начинаещи.",
                            DurationInMinutes = 240,
                            EndDate = new DateTime(2031, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstitutionId = "3cf3fb4a-235e-4c93-b66f-c1557006e067",
                            IsDeleted = false,
                            Location = "Отдалечено",
                            Mode = 0,
                            Name = "Въведение в вградените системи",
                            Price = 1600m,
                            StartDate = new DateTime(2025, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            AverageStarRating = 4.7000000000000002,
                            Coordinates = "42.680441,23.322253",
                            CourseDuration = 13,
                            Description = "Овладейте принципите на интериорния дизайн, планиране на пространство и теория на цветовете с практически проекти.",
                            DurationInMinutes = 180,
                            EndDate = new DateTime(2025, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstitutionId = "6a358b17-ffbe-4ac9-8d20-92544e3b739d",
                            IsDeleted = false,
                            Location = "България, София, ул. \"Капитан Андреев\" 29",
                            Mode = 1,
                            Name = "Магистърски курс по интериорен дизайн",
                            Price = 2200m,
                            StartDate = new DateTime(2025, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            AverageStarRating = 4.7999999999999998,
                            Coordinates = "42.139492,24.748373",
                            CourseDuration = 10,
                            Description = "Научете основите на музикалната продукция, включително запис, смесване и мастеринг, с практически сесии в студио.",
                            DurationInMinutes = 120,
                            EndDate = new DateTime(2026, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstitutionId = "6a358b17-ffbe-4ac9-8d20-92544e3b739d",
                            IsDeleted = false,
                            Location = "България, Пловдив, ул. \"Иван Вазов\" 23",
                            Mode = 1,
                            Name = "Основи на музикалната продукция",
                            Price = 2000m,
                            StartDate = new DateTime(2023, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13,
                            AverageStarRating = 4.9000000000000004,
                            Coordinates = "42.140365,24.718849",
                            CourseDuration = 15,
                            Description = "Задълбочете своите познания по математическите концепции, включително многомерен калкулус, диференциални уравнения и реални приложения.",
                            DurationInMinutes = 45,
                            EndDate = new DateTime(2025, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstitutionId = "fa360a62-9355-474a-824d-aaa85d9fbd65",
                            IsDeleted = false,
                            Location = "България, Пловдив, ул. \"Перущица\" 15",
                            Mode = 1,
                            Name = "Работилница по напреднала математика",
                            Price = 1100m,
                            StartDate = new DateTime(2023, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 14,
                            AverageStarRating = 4.7999999999999998,
                            CourseDuration = 8,
                            Description = "Научете основни технологии за фронтенд като HTML, CSS, JavaScript и React за изграждане на впечатляващи и отзивчиви уеб приложения.",
                            DurationInMinutes = 100,
                            EndDate = new DateTime(2027, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstitutionId = "428bcf46-40f2-47b2-ac4a-a49f570178ad",
                            IsDeleted = false,
                            Location = "Отдалечено",
                            Mode = 0,
                            Name = "Буткемп по фронтенд уеб разработка",
                            Price = 1500m,
                            StartDate = new DateTime(2025, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 15,
                            AverageStarRating = 4.7000000000000002,
                            CourseDuration = 12,
                            Description = "Изследвайте основните принципи на компютърното инженерство, включително проектиране на хардуер, вградени системи и софтуерна интеграция.",
                            DurationInMinutes = 160,
                            EndDate = new DateTime(2025, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstitutionId = "3cf3fb4a-235e-4c93-b66f-c1557006e067",
                            IsDeleted = false,
                            Location = "Отдалечено",
                            Mode = 0,
                            Name = "Основи на компютърното инженерство",
                            Price = 1000m,
                            StartDate = new DateTime(2023, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 16,
                            AverageStarRating = 4.7999999999999998,
                            Coordinates = "42.150184,24.760268",
                            CourseDuration = 11,
                            Description = "Получете практически опит с протоколи за киберсигурност, техники за криптиране, етично хакерство и мрежова сигурност за защита на дигитални активи.",
                            DurationInMinutes = 260,
                            EndDate = new DateTime(2025, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstitutionId = "428bcf46-40f2-47b2-ac4a-a49f570178ad",
                            IsDeleted = false,
                            Location = "България, Пловдив, ул. \"Захари Зограф\" 10",
                            Mode = 1,
                            Name = "Основи на киберсигурността",
                            Price = 1399m,
                            StartDate = new DateTime(2022, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("PathFinder.Data.Models.CourseSphere", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasComment("Course's foreign key");

                    b.Property<int>("SphereId")
                        .HasColumnType("int")
                        .HasComment("Sphere's foreign key");

                    b.Property<int?>("CourseId1")
                        .HasColumnType("int");

                    b.Property<int?>("SphereId1")
                        .HasColumnType("int");

                    b.HasKey("CourseId", "SphereId");

                    b.HasIndex("CourseId1");

                    b.HasIndex("SphereId");

                    b.HasIndex("SphereId1");

                    b.ToTable("CoursesSpheres", t =>
                        {
                            t.HasComment("Corses' spheres");
                        });

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            SphereId = 42
                        },
                        new
                        {
                            CourseId = 1,
                            SphereId = 8
                        },
                        new
                        {
                            CourseId = 1,
                            SphereId = 3
                        },
                        new
                        {
                            CourseId = 2,
                            SphereId = 12
                        },
                        new
                        {
                            CourseId = 2,
                            SphereId = 6
                        },
                        new
                        {
                            CourseId = 2,
                            SphereId = 2
                        },
                        new
                        {
                            CourseId = 3,
                            SphereId = 2
                        },
                        new
                        {
                            CourseId = 3,
                            SphereId = 6
                        },
                        new
                        {
                            CourseId = 3,
                            SphereId = 11
                        },
                        new
                        {
                            CourseId = 3,
                            SphereId = 58
                        },
                        new
                        {
                            CourseId = 4,
                            SphereId = 2
                        },
                        new
                        {
                            CourseId = 4,
                            SphereId = 6
                        },
                        new
                        {
                            CourseId = 4,
                            SphereId = 46
                        },
                        new
                        {
                            CourseId = 4,
                            SphereId = 13
                        },
                        new
                        {
                            CourseId = 4,
                            SphereId = 11
                        },
                        new
                        {
                            CourseId = 5,
                            SphereId = 4
                        },
                        new
                        {
                            CourseId = 5,
                            SphereId = 60
                        },
                        new
                        {
                            CourseId = 5,
                            SphereId = 61
                        },
                        new
                        {
                            CourseId = 6,
                            SphereId = 5
                        },
                        new
                        {
                            CourseId = 6,
                            SphereId = 35
                        },
                        new
                        {
                            CourseId = 6,
                            SphereId = 62
                        },
                        new
                        {
                            CourseId = 7,
                            SphereId = 18
                        },
                        new
                        {
                            CourseId = 7,
                            SphereId = 63
                        },
                        new
                        {
                            CourseId = 7,
                            SphereId = 64
                        },
                        new
                        {
                            CourseId = 8,
                            SphereId = 4
                        },
                        new
                        {
                            CourseId = 8,
                            SphereId = 60
                        },
                        new
                        {
                            CourseId = 8,
                            SphereId = 61
                        },
                        new
                        {
                            CourseId = 9,
                            SphereId = 5
                        },
                        new
                        {
                            CourseId = 9,
                            SphereId = 48
                        },
                        new
                        {
                            CourseId = 9,
                            SphereId = 7
                        },
                        new
                        {
                            CourseId = 10,
                            SphereId = 2
                        },
                        new
                        {
                            CourseId = 10,
                            SphereId = 6
                        },
                        new
                        {
                            CourseId = 10,
                            SphereId = 11
                        },
                        new
                        {
                            CourseId = 11,
                            SphereId = 9
                        },
                        new
                        {
                            CourseId = 11,
                            SphereId = 5
                        },
                        new
                        {
                            CourseId = 12,
                            SphereId = 5
                        },
                        new
                        {
                            CourseId = 12,
                            SphereId = 40
                        },
                        new
                        {
                            CourseId = 12,
                            SphereId = 65
                        },
                        new
                        {
                            CourseId = 12,
                            SphereId = 66
                        },
                        new
                        {
                            CourseId = 12,
                            SphereId = 67
                        },
                        new
                        {
                            CourseId = 13,
                            SphereId = 4
                        },
                        new
                        {
                            CourseId = 13,
                            SphereId = 58
                        },
                        new
                        {
                            CourseId = 14,
                            SphereId = 12
                        },
                        new
                        {
                            CourseId = 14,
                            SphereId = 14
                        },
                        new
                        {
                            CourseId = 14,
                            SphereId = 7
                        },
                        new
                        {
                            CourseId = 14,
                            SphereId = 46
                        },
                        new
                        {
                            CourseId = 14,
                            SphereId = 6
                        },
                        new
                        {
                            CourseId = 15,
                            SphereId = 2
                        },
                        new
                        {
                            CourseId = 15,
                            SphereId = 6
                        },
                        new
                        {
                            CourseId = 15,
                            SphereId = 11
                        },
                        new
                        {
                            CourseId = 16,
                            SphereId = 2
                        },
                        new
                        {
                            CourseId = 16,
                            SphereId = 6
                        },
                        new
                        {
                            CourseId = 16,
                            SphereId = 47
                        });
                });

            modelBuilder.Entity("PathFinder.Data.Models.InstitutionRoleRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Company request identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Reasoning for the role request");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasComment("Role request sender username");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Role request sender id");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("Pending/Accepted/Declined request status");

                    b.HasKey("Id");

                    b.ToTable("InstitutionRoleRequests");
                });

            modelBuilder.Entity("PathFinder.Data.Models.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Job's idetifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("AverageStarRating")
                        .HasColumnType("float")
                        .HasComment("Job average star rating");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Company's foreign key");

                    b.Property<string>("Coordinates")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Longtitude and Latitude for the job's location");

                    b.Property<string>("Description")
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)")
                        .HasComment("Job's details");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("JobType")
                        .HasColumnType("int")
                        .HasComment("The type of the job");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Job's location");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Job's position");

                    b.Property<string>("Requirement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Job's requiements");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Job salary");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasComment("Job's title");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Jobs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AverageStarRating = 4.5,
                            CompanyId = "b3693b0c-9c11-48ee-a3be-db37d5439ab0",
                            Description = "Разработване и поддръжка на софтуерни решения.",
                            IsDeleted = false,
                            JobType = 0,
                            Location = "Отдалечено",
                            Position = "Младши разработчик",
                            Requirement = "1+ година опит с C# и .NET",
                            Salary = 12000m,
                            Title = "Софтурен разработчик"
                        },
                        new
                        {
                            Id = 2,
                            AverageStarRating = 3.5,
                            CompanyId = "b3693b0c-9c11-48ee-a3be-db37d5439ab0",
                            Description = "Създаване на визуални дизайни за маркетингови материали.",
                            IsDeleted = false,
                            JobType = 0,
                            Location = "Отдалечено",
                            Position = "Старши дизайнер",
                            Requirement = "Производителност с Adobe Suite",
                            Salary = 14500m,
                            Title = "Графичен дизайнер"
                        },
                        new
                        {
                            Id = 3,
                            AverageStarRating = 3.2000000000000002,
                            CompanyId = "e0d6328d-f003-4bb1-8daa-21dcf49db469",
                            Coordinates = "42.642328,24.79907",
                            Description = "Предоставяне на услуги по стайлинг, подстригване и лечение на коса на клиенти.",
                            IsDeleted = false,
                            JobType = 1,
                            Location = "България, Карлово, ул. \"Дъбенско шосе\" 2",
                            Position = "Професионален фризьор",
                            Requirement = "Сертифициран козметолог с 2+ години опит.",
                            Salary = 4000m,
                            Title = "Фризьор"
                        },
                        new
                        {
                            Id = 4,
                            AverageStarRating = 4.2999999999999998,
                            CompanyId = "16226cef-b670-447e-99a9-b627cb16ae0b",
                            Coordinates = "42.119481,24.730979",
                            Description = "Извършване на инспекции, ремонти и редовна поддръжка на превозни средства.",
                            IsDeleted = false,
                            JobType = 1,
                            Location = "България, Пловдив, ул. \"Димо Хаджидимов\" 4В",
                            Position = "Автомобилен техник",
                            Requirement = "Основни механични умения и желание за учене. Не се изисква предишна сертификация.",
                            Salary = 8000m,
                            Title = "Автомеханик"
                        },
                        new
                        {
                            Id = 5,
                            AverageStarRating = 4.0,
                            CompanyId = "17585a62-c173-4c68-9e4a-2ba93a419b21",
                            Coordinates = "42.118114,24.729677",
                            Description = "Диагностициране и лечение на кожни заболявания, предоставяне на експертни съвети за грижа за кожата и извършване на дерматологични процедури.",
                            IsDeleted = false,
                            JobType = 1,
                            Location = "България, Русе, бул. \"Липник\" 8",
                            Position = "Сертифициран дерматолог",
                            Requirement = "Медицинска степен със специализация по дерматология. Изисква се валидна медицинска лицензия.",
                            Salary = 12000m,
                            Title = "Дерматолог"
                        },
                        new
                        {
                            Id = 6,
                            AverageStarRating = 2.6000000000000001,
                            CompanyId = "596c6add-eaae-4890-8d4d-38aa5a0671bd",
                            Coordinates = "43.412509,24.622857",
                            Description = "Преподаване на математика на ученици, подготовка на уроци и оценяване на напредъка на учениците.",
                            IsDeleted = false,
                            JobType = 1,
                            Location = "България, Плевен, ул. \"Иван Вазов\"",
                            Position = "Учител по математика в гимназия",
                            Requirement = "Бакалавърска степен по математика или образование. Преподавателска сертификация се предпочита.",
                            Salary = 5000m,
                            Title = "Учител по математика"
                        },
                        new
                        {
                            Id = 7,
                            AverageStarRating = 4.0999999999999996,
                            CompanyId = "596c6add-eaae-4890-8d4d-38aa5a0671bd",
                            Coordinates = "43.412509,24.622857",
                            Description = "Поддържане на чистотата и реда в училищните тоалетни чрез извършване на рутинни почистващи задачи като метене, миене и дезинфекция на повърхности.",
                            IsDeleted = false,
                            JobType = 1,
                            Location = "България, Плевен, ул. \"Иван Вазов\"",
                            Position = "Почистващ персонал в тоалетни",
                            Requirement = "Не се изисква опит, но внимание към детайлите и надеждност са от съществено значение.",
                            Salary = 1500m,
                            Title = "Учител по почистване на училище"
                        },
                        new
                        {
                            Id = 8,
                            AverageStarRating = 4.0999999999999996,
                            CompanyId = "eb1f5c9f-186b-4a93-a9bd-64a6055c61cd",
                            Coordinates = "42.680454,26.320009",
                            Description = "Приготвяне и сервиране на алкохолни и безалкохолни напитки, предоставяне на отлично обслужване на клиенти и поддържане на чистота и организация на бара.",
                            IsDeleted = false,
                            JobType = 1,
                            Location = "България, Сливен, бул. \"Цар Освободител\" 15А",
                            Position = "Барман",
                            Requirement = "Не се изисква опит, но внимание към детайлите и надеждност са от съществено значение.",
                            Salary = 1500m,
                            Title = "Барман"
                        },
                        new
                        {
                            Id = 9,
                            AverageStarRating = 3.3999999999999999,
                            CompanyId = "eb1f5c9f-186b-4a93-a9bd-64a6055c61cd",
                            Coordinates = "42.680454,26.320009",
                            Description = "Предоставяне на отлично обслужване на клиентите чрез приемане на поръчки, сервиране на храна и напитки и осигуряване на удовлетвореността на клиентите.",
                            IsDeleted = false,
                            JobType = 1,
                            Location = "България, Сливен, бул. \"Цар Освободител\" 15А",
                            Position = "Сервитьор в ресторант",
                            Requirement = "Добри комуникационни умения и приятелско отношение. Не се изисква опит.",
                            Salary = 2000m,
                            Title = "Сервитьор"
                        },
                        new
                        {
                            Id = 10,
                            AverageStarRating = 4.9000000000000004,
                            CompanyId = "7dbc12c7-18ec-4af2-a5b7-877ff0df3faf",
                            Description = "Писане на ангажиращи статии, блогове и уеб съдържание за клиенти от различни индустрии.",
                            IsDeleted = false,
                            JobType = 0,
                            Location = "Отдалечено",
                            Position = "Фриланс писател",
                            Requirement = "Отлични писателски умения и креативност. Портфолио се предпочита.",
                            Salary = 5000m,
                            Title = "Копирайтър"
                        },
                        new
                        {
                            Id = 11,
                            AverageStarRating = 3.7000000000000002,
                            CompanyId = "7dbc12c7-18ec-4af2-a5b7-877ff0df3faf",
                            Description = "Редактиране и подобряване на видео съдържание, добавяне на преходи, ефекти и звукови тракове за създаване на висококачествени продукции.",
                            IsDeleted = false,
                            JobType = 0,
                            Location = "Отдалечено",
                            Position = "Фриланс видеоредактор",
                            Requirement = "Производителност с видео редакторски софтуер като Adobe Premiere Pro, Final Cut Pro или DaVinci Resolve. Портфолио се изисква.",
                            Salary = 6000m,
                            Title = "Видеоредактор"
                        },
                        new
                        {
                            Id = 12,
                            AverageStarRating = 4.0999999999999996,
                            CompanyId = "b3693b0c-9c11-48ee-a3be-db37d5439ab0",
                            Coordinates = "43.207564,27.918225",
                            Description = "Помощ при разработване, тестване и отстраняване на грешки в софтуерни приложения под ръководството на старши разработчици.",
                            IsDeleted = false,
                            JobType = 2,
                            Location = "България, Варна, бул. \"8-ми Приморски полк\" 54",
                            Position = "Стажант разработчик",
                            Requirement = "Записан в програма за компютърни науки или свързана специалност. Основни познания по програмни езици като Python или Java.",
                            Salary = 500m,
                            Title = "Стажант по софтуерно разработване"
                        },
                        new
                        {
                            Id = 13,
                            AverageStarRating = 3.7999999999999998,
                            CompanyId = "b3693b0c-9c11-48ee-a3be-db37d5439ab0",
                            Coordinates = "42.659204,23.414001",
                            Description = "Помощ на дизайнерския екип при създаване на визуални активи, включително графики за социални медии, маркетингови материали и презентации.",
                            IsDeleted = false,
                            JobType = 2,
                            Location = "България, София, ул. \"Мюнхен\" 14",
                            Position = "Стажант графичен дизайнер",
                            Requirement = "Записан в програма за графичен дизайн или свързана специалност. Производителност с дизайнерски софтуер като Adobe Illustrator и Photoshop се предпочита.",
                            Salary = 700m,
                            Title = "Стажант графичен дизайнер"
                        },
                        new
                        {
                            Id = 14,
                            AverageStarRating = 3.8999999999999999,
                            CompanyId = "17585a62-c173-4c68-9e4a-2ba93a419b21",
                            Coordinates = "43.84582,25.966291",
                            Description = "Помощ на фармацевти при разпределяне на лекарства, приготвяне на рецепти, управление на инвентар и предоставяне на обслужване на клиенти под наблюдение.",
                            IsDeleted = false,
                            JobType = 2,
                            Location = "България, Русе, бул. \"Липник\" 8",
                            Position = "Стажант фармацевт",
                            Requirement = "Записан в програма за фармацевтика или фармацевтични науки. Добро внимание към детайлите и комуникационни умения.",
                            Salary = 900m,
                            Title = "Стажант в аптека"
                        },
                        new
                        {
                            Id = 15,
                            AverageStarRating = 4.0999999999999996,
                            CompanyId = "17585a62-c173-4c68-9e4a-2ba93a419b21",
                            Coordinates = "43.84582,25.966291",
                            Description = "Предоставяне на медицинска грижа, свързана с женското здраве, включително диагностика, лечение и профилактика на репродуктивни здравословни проблеми, както и извършване на гинекологични прегледи и процедури.",
                            IsDeleted = false,
                            JobType = 1,
                            Location = "България, Русе, бул. \"Липник\" 8",
                            Position = "Сертифициран гинеколог",
                            Requirement = "Медицинска степен със специализация по гинекология. Изисква се валидна медицинска лицензия.",
                            Salary = 13000m,
                            Title = "Гинеколог"
                        });
                });

            modelBuilder.Entity("PathFinder.Data.Models.JobSphere", b =>
                {
                    b.Property<int>("JobId")
                        .HasColumnType("int")
                        .HasComment("Job's foreign key");

                    b.Property<int>("SphereId")
                        .HasColumnType("int")
                        .HasComment("Sphere's foreign key");

                    b.Property<int?>("JobId1")
                        .HasColumnType("int");

                    b.Property<int?>("SphereId1")
                        .HasColumnType("int");

                    b.HasKey("JobId", "SphereId");

                    b.HasIndex("JobId1");

                    b.HasIndex("SphereId");

                    b.HasIndex("SphereId1");

                    b.ToTable("JobsSpheres", t =>
                        {
                            t.HasComment("Jobs' spheres");
                        });

                    b.HasData(
                        new
                        {
                            JobId = 1,
                            SphereId = 2
                        },
                        new
                        {
                            JobId = 1,
                            SphereId = 6
                        },
                        new
                        {
                            JobId = 1,
                            SphereId = 12
                        },
                        new
                        {
                            JobId = 1,
                            SphereId = 13
                        },
                        new
                        {
                            JobId = 1,
                            SphereId = 46
                        },
                        new
                        {
                            JobId = 2,
                            SphereId = 5
                        },
                        new
                        {
                            JobId = 2,
                            SphereId = 7
                        },
                        new
                        {
                            JobId = 2,
                            SphereId = 15
                        },
                        new
                        {
                            JobId = 3,
                            SphereId = 16
                        },
                        new
                        {
                            JobId = 3,
                            SphereId = 17
                        },
                        new
                        {
                            JobId = 3,
                            SphereId = 18
                        },
                        new
                        {
                            JobId = 3,
                            SphereId = 59
                        },
                        new
                        {
                            JobId = 4,
                            SphereId = 17
                        },
                        new
                        {
                            JobId = 4,
                            SphereId = 19
                        },
                        new
                        {
                            JobId = 5,
                            SphereId = 16
                        },
                        new
                        {
                            JobId = 5,
                            SphereId = 1
                        },
                        new
                        {
                            JobId = 5,
                            SphereId = 18
                        },
                        new
                        {
                            JobId = 5,
                            SphereId = 2
                        },
                        new
                        {
                            JobId = 5,
                            SphereId = 24
                        },
                        new
                        {
                            JobId = 5,
                            SphereId = 50
                        },
                        new
                        {
                            JobId = 5,
                            SphereId = 25
                        },
                        new
                        {
                            JobId = 6,
                            SphereId = 4
                        },
                        new
                        {
                            JobId = 6,
                            SphereId = 58
                        },
                        new
                        {
                            JobId = 7,
                            SphereId = 17
                        },
                        new
                        {
                            JobId = 7,
                            SphereId = 18
                        },
                        new
                        {
                            JobId = 7,
                            SphereId = 31
                        },
                        new
                        {
                            JobId = 8,
                            SphereId = 17
                        },
                        new
                        {
                            JobId = 8,
                            SphereId = 35
                        },
                        new
                        {
                            JobId = 8,
                            SphereId = 38
                        },
                        new
                        {
                            JobId = 9,
                            SphereId = 17
                        },
                        new
                        {
                            JobId = 9,
                            SphereId = 59
                        },
                        new
                        {
                            JobId = 10,
                            SphereId = 5
                        },
                        new
                        {
                            JobId = 10,
                            SphereId = 45
                        },
                        new
                        {
                            JobId = 10,
                            SphereId = 40
                        },
                        new
                        {
                            JobId = 10,
                            SphereId = 36
                        },
                        new
                        {
                            JobId = 11,
                            SphereId = 5
                        },
                        new
                        {
                            JobId = 11,
                            SphereId = 7
                        },
                        new
                        {
                            JobId = 11,
                            SphereId = 36
                        },
                        new
                        {
                            JobId = 11,
                            SphereId = 2
                        },
                        new
                        {
                            JobId = 11,
                            SphereId = 40
                        },
                        new
                        {
                            JobId = 11,
                            SphereId = 44
                        },
                        new
                        {
                            JobId = 11,
                            SphereId = 45
                        },
                        new
                        {
                            JobId = 11,
                            SphereId = 48
                        },
                        new
                        {
                            JobId = 12,
                            SphereId = 2
                        },
                        new
                        {
                            JobId = 12,
                            SphereId = 6
                        },
                        new
                        {
                            JobId = 12,
                            SphereId = 12
                        },
                        new
                        {
                            JobId = 12,
                            SphereId = 13
                        },
                        new
                        {
                            JobId = 13,
                            SphereId = 5
                        },
                        new
                        {
                            JobId = 13,
                            SphereId = 7
                        },
                        new
                        {
                            JobId = 13,
                            SphereId = 12
                        },
                        new
                        {
                            JobId = 13,
                            SphereId = 6
                        },
                        new
                        {
                            JobId = 14,
                            SphereId = 24
                        },
                        new
                        {
                            JobId = 14,
                            SphereId = 18
                        },
                        new
                        {
                            JobId = 14,
                            SphereId = 26
                        },
                        new
                        {
                            JobId = 14,
                            SphereId = 1
                        },
                        new
                        {
                            JobId = 14,
                            SphereId = 49
                        },
                        new
                        {
                            JobId = 15,
                            SphereId = 52
                        },
                        new
                        {
                            JobId = 15,
                            SphereId = 18
                        },
                        new
                        {
                            JobId = 15,
                            SphereId = 50
                        },
                        new
                        {
                            JobId = 15,
                            SphereId = 51
                        },
                        new
                        {
                            JobId = 15,
                            SphereId = 24
                        },
                        new
                        {
                            JobId = 15,
                            SphereId = 1
                        });
                });

            modelBuilder.Entity("PathFinder.Data.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Review's idetifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(750)
                        .HasColumnType("nvarchar(750)")
                        .HasComment("Comment");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasComment("Course's foreign key");

                    b.Property<int?>("JobId")
                        .HasColumnType("int")
                        .HasComment("Job's foreign key");

                    b.Property<string>("PublisherId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Publisher's foreign key");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2")
                        .HasComment("Review's date");

                    b.Property<int?>("StarRating")
                        .HasColumnType("int")
                        .HasComment("Review's star rating");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("JobId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "Работата като гинеколог тук беше невероятно удовлетворяваща. Медицинският екип е много подкрепящ, и чувствам, че уменията ми се ценят. Клиниката осигурява отличен баланс между работа и личен живот и има много възможности за професионално развитие.",
                            JobId = 15,
                            PublisherId = "e8d223af-7285-41c5-8c38-9e6989d4410d",
                            ReviewDate = new DateTime(2024, 12, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StarRating = 5
                        },
                        new
                        {
                            Id = 2,
                            Comment = "Работната среда е стресираща, с много пациенти и недостатъчно време, за да се обърне внимание на всеки. Няма много възможности за напредък, а управлението не подкрепя новите идеи или подобрения.",
                            JobId = 15,
                            PublisherId = "ca145762-b5db-4836-b963-85eff67fb124",
                            ReviewDate = new DateTime(2024, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StarRating = 2
                        },
                        new
                        {
                            Id = 3,
                            Comment = "Работата като фризьор тук беше фантастично изживяване. Екипът е подкрепящ, а аз научих толкова много от старшите стилисти. Работната среда е приветлива, а възможностите за професионално развитие са много.",
                            JobId = 3,
                            PublisherId = "b93fa043-cdea-4bd9-9d0b-7b16ee7c5355",
                            ReviewDate = new DateTime(2024, 12, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StarRating = 5
                        },
                        new
                        {
                            Id = 4,
                            Comment = "Работата може да бъде физически изтощителна и работната среда често е хаотична. Липсва ясна комуникация от управлението, а часовете могат да бъдат дълги с недостатъчно време за адекватно обслужване на всеки автомобил. Заплатата не отразява натоварването.",
                            JobId = 4,
                            PublisherId = "7d089603-dc80-415a-913b-f24b1a90b5f1",
                            ReviewDate = new DateTime(2024, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StarRating = 2
                        },
                        new
                        {
                            Id = 5,
                            Comment = "Работата като софтуерен разработчик тук беше изключително удовлетворяваща. Компанията насърчава сътрудничеството, а аз имах възможност да работя с иновативни технологии. Осигурен е добър баланс между работа и личен живот, а управлението подкрепя непрекъснатото учене.",
                            JobId = 1,
                            PublisherId = "b93fa043-cdea-4bd9-9d0b-7b16ee7c5355",
                            ReviewDate = new DateTime(2024, 11, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StarRating = 5
                        },
                        new
                        {
                            Id = 6,
                            Comment = "Работата е физически изтощителна, а често липсва подкрепа от управлението. Часовете могат да бъдат неравномерни, а натоварването понякога е непосилно с малко признание. Комуникацията за задачите и очакванията трябва да се подобри.",
                            JobId = 7,
                            PublisherId = "9e547484-9ea8-45e6-a488-d657f6f1c598",
                            ReviewDate = new DateTime(2024, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StarRating = 2
                        },
                        new
                        {
                            Id = 7,
                            Comment = "Курсът по английски език е изключително добре структуриран. Уроците са ангажиращи, а преподавателите са компетентни и подкрепящи. Курсът значително подобри езиковите ми умения, и сега се чувствам по-сигурен в говоренето и писането на английски.",
                            CourseId = 8,
                            PublisherId = "e47b8b58-2e3a-4f02-aee5-485d3e6db2b2",
                            ReviewDate = new DateTime(2024, 8, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StarRating = 4
                        },
                        new
                        {
                            Id = 8,
                            Comment = "Курсът липсва персонализирано внимание, а темпото може да е твърде бързо за начинаещи. Материалите изглеждат остарели, а няма достатъчно интерактивни елементи, за да се запази интересът на ученик. Не отговори на моите очаквания.",
                            JobId = 8,
                            PublisherId = "9e547484-9ea8-45e6-a488-d657f6f1c598",
                            ReviewDate = new DateTime(2024, 11, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StarRating = 4
                        },
                        new
                        {
                            Id = 9,
                            Comment = "Курсът по уеб разработка надмина очакванията ми. Учебният план е изчерпателен, а преподавателите са много компетентни. Научих практични умения по програмиране и имах възможност да работя по реални проекти. Горещо препоръчвам!",
                            JobId = 2,
                            PublisherId = "e8d223af-7285-41c5-8c38-9e6989d4410d",
                            ReviewDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StarRating = 5
                        },
                        new
                        {
                            Id = 10,
                            Comment = "Курсът беше твърде базов за моите очаквания. Той се съсредоточаваше много върху въведение в концепциите, с много малко задълбочено покритие на напреднали теми. Също така темпото беше твърде бавно, а някои упражнения не бяха толкова предизвикателни, колкото очаквах.",
                            JobId = 4,
                            PublisherId = "9e547484-9ea8-45e6-a488-d657f6f1c598",
                            ReviewDate = new DateTime(2024, 2, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StarRating = 2
                        },
                        new
                        {
                            Id = 11,
                            Comment = "Този курс по изобразително изкуство беше невероятен! Преподавателите бяха изключително талантливи и предложиха персонализирана обратна връзка. Курсът обхвана различни техники и медии, които наистина ми помогнаха да подобря уменията си. Практическото обучение и творческата атмосфера направиха ученето забавно и ангажиращо.",
                            JobId = 9,
                            PublisherId = "ca145762-b5db-4836-b963-85eff67fb124",
                            ReviewDate = new DateTime(2024, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StarRating = 4
                        },
                        new
                        {
                            Id = 12,
                            Comment = "Курсът по испански език беше невероятно преживяване! Преподавателят беше ангажиращ и търпелив, което направи ученето приятно. Уроците бяха интерактивни, а размерът на класа беше идеален за персонализирано внимание. Сега се чувствам много по-сигурен в говоренето и разбирането на испански след завършването на курса.",
                            JobId = 5,
                            PublisherId = "ca145762-b5db-4836-b963-85eff67fb124",
                            ReviewDate = new DateTime(2023, 7, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StarRating = 5
                        });
                });

            modelBuilder.Entity("PathFinder.Data.Models.Sphere", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Sphere's identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Sphere");

                    b.HasKey("Id");

                    b.ToTable("Spheres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Здравеопазване"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Технологии"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Бизнес и финанси"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Образование"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Творчески изкуства"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Компютърни науки"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Графичен дизайн"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Маркетинг и управление"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Архитектура"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Управление на съоръжения"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Инженерство"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Уеб разработка"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Back-End програмиране"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Front-End програмиране"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Adobe дизайн"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Индустрия за красота и лична грижа"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Услуги"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Здраве и социални грижи"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Автомобилна индустрия"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Механично инженерство"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Транспорт и логистика"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Квалифицирани занаяти"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Устойчивост и зелени технологии"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Медицински специалности"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Естетична дерматология"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Фармация"
                        },
                        new
                        {
                            Id = 27,
                            Name = "STEM образование"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Публичен сектор"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Разработка на учебни програми"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Неправителствено образование"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Почистване и поддръжка"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Обществени услуги"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Екологични услуги"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Образователни услуги"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Хранителни и напиткови услуги"
                        },
                        new
                        {
                            Id = 36,
                            Name = "Обслужване на клиенти"
                        },
                        new
                        {
                            Id = 37,
                            Name = "Управление на събития"
                        },
                        new
                        {
                            Id = 38,
                            Name = "Нощен живот и развлекателна индустрия"
                        },
                        new
                        {
                            Id = 39,
                            Name = "Туризъм и отдих"
                        },
                        new
                        {
                            Id = 40,
                            Name = "Медии и журналистика"
                        },
                        new
                        {
                            Id = 41,
                            Name = "Маркетинг и комуникации"
                        },
                        new
                        {
                            Id = 42,
                            Name = "Цифров маркетинг"
                        },
                        new
                        {
                            Id = 43,
                            Name = "Фрилансинг"
                        },
                        new
                        {
                            Id = 44,
                            Name = "Продукция на филми"
                        },
                        new
                        {
                            Id = 45,
                            Name = "Медии"
                        },
                        new
                        {
                            Id = 46,
                            Name = "Разработка на софтуер"
                        },
                        new
                        {
                            Id = 47,
                            Name = "Сигурност"
                        },
                        new
                        {
                            Id = 48,
                            Name = "Визуални изкуства"
                        },
                        new
                        {
                            Id = 49,
                            Name = "Търговия с лекарства"
                        },
                        new
                        {
                            Id = 50,
                            Name = "Клинични грижи"
                        },
                        new
                        {
                            Id = 51,
                            Name = "Репродуктивно здраве"
                        },
                        new
                        {
                            Id = 52,
                            Name = "Женско здраве"
                        },
                        new
                        {
                            Id = 53,
                            Name = "Козметична хирургия"
                        },
                        new
                        {
                            Id = 54,
                            Name = "СПА и уелнес"
                        },
                        new
                        {
                            Id = 55,
                            Name = "Лични грижи"
                        },
                        new
                        {
                            Id = 56,
                            Name = "Управление на салони"
                        },
                        new
                        {
                            Id = 57,
                            Name = "Козметика и фризьорство"
                        },
                        new
                        {
                            Id = 58,
                            Name = "Математика"
                        },
                        new
                        {
                            Id = 59,
                            Name = "Хотелиерство и ресторантьорство"
                        },
                        new
                        {
                            Id = 60,
                            Name = "Културни изследвания"
                        },
                        new
                        {
                            Id = 61,
                            Name = "Езици и лингвистика"
                        },
                        new
                        {
                            Id = 62,
                            Name = "Готварство"
                        },
                        new
                        {
                            Id = 63,
                            Name = "Физическо възпитание"
                        },
                        new
                        {
                            Id = 64,
                            Name = "Фитнес и лични тренировки"
                        },
                        new
                        {
                            Id = 65,
                            Name = "Аудио инженерство"
                        },
                        new
                        {
                            Id = 66,
                            Name = "Музикална композиция"
                        },
                        new
                        {
                            Id = 67,
                            Name = "Музикални технологии"
                        });
                });

            modelBuilder.Entity("PathFinder.Data.Models.UserCourse", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User's foreign key");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasComment("Course's foreign key");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CourseId1")
                        .HasColumnType("int");

                    b.HasKey("UserId", "CourseId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CourseId");

                    b.HasIndex("CourseId1");

                    b.ToTable("UsersCourses", t =>
                        {
                            t.HasComment("Users' courses");
                        });

                    b.HasData(
                        new
                        {
                            UserId = "e47b8b58-2e3a-4f02-aee5-485d3e6db2b2",
                            CourseId = 5
                        },
                        new
                        {
                            UserId = "9e547484-9ea8-45e6-a488-d657f6f1c598",
                            CourseId = 16
                        });
                });

            modelBuilder.Entity("PathFinder.Data.Models.UserJob", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User's foreign key");

                    b.Property<int>("JobId")
                        .HasColumnType("int")
                        .HasComment("Job's foreign key");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("JobId1")
                        .HasColumnType("int");

                    b.HasKey("UserId", "JobId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("JobId");

                    b.HasIndex("JobId1");

                    b.ToTable("UsersJobs", t =>
                        {
                            t.HasComment("Users' jobs");
                        });

                    b.HasData(
                        new
                        {
                            UserId = "e8d223af-7285-41c5-8c38-9e6989d4410d",
                            JobId = 1
                        },
                        new
                        {
                            UserId = "d444522c-71c1-4cc9-b815-4ea25a49f17b",
                            JobId = 2
                        });
                });

            modelBuilder.Entity("PathFinder.Data.Models.UserSphere", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User's foreign key");

                    b.Property<int>("SphereId")
                        .HasColumnType("int")
                        .HasComment("Sphere's foreign key");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("SphereId1")
                        .HasColumnType("int");

                    b.HasKey("UserId", "SphereId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("SphereId");

                    b.HasIndex("SphereId1");

                    b.ToTable("UsersSpheres", t =>
                        {
                            t.HasComment("Users' spheres");
                        });

                    b.HasData(
                        new
                        {
                            UserId = "e47b8b58-2e3a-4f02-aee5-485d3e6db2b2",
                            SphereId = 60
                        },
                        new
                        {
                            UserId = "e47b8b58-2e3a-4f02-aee5-485d3e6db2b2",
                            SphereId = 61
                        },
                        new
                        {
                            UserId = "e47b8b58-2e3a-4f02-aee5-485d3e6db2b2",
                            SphereId = 2
                        },
                        new
                        {
                            UserId = "9e547484-9ea8-45e6-a488-d657f6f1c598",
                            SphereId = 5
                        },
                        new
                        {
                            UserId = "9e547484-9ea8-45e6-a488-d657f6f1c598",
                            SphereId = 7
                        },
                        new
                        {
                            UserId = "9e547484-9ea8-45e6-a488-d657f6f1c598",
                            SphereId = 11
                        },
                        new
                        {
                            UserId = "e8d223af-7285-41c5-8c38-9e6989d4410d",
                            SphereId = 13
                        },
                        new
                        {
                            UserId = "e8d223af-7285-41c5-8c38-9e6989d4410d",
                            SphereId = 12
                        },
                        new
                        {
                            UserId = "e8d223af-7285-41c5-8c38-9e6989d4410d",
                            SphereId = 15
                        },
                        new
                        {
                            UserId = "d444522c-71c1-4cc9-b815-4ea25a49f17b",
                            SphereId = 35
                        },
                        new
                        {
                            UserId = "d444522c-71c1-4cc9-b815-4ea25a49f17b",
                            SphereId = 38
                        },
                        new
                        {
                            UserId = "d444522c-71c1-4cc9-b815-4ea25a49f17b",
                            SphereId = 40
                        },
                        new
                        {
                            UserId = "b93fa043-cdea-4bd9-9d0b-7b16ee7c5355",
                            SphereId = 58
                        },
                        new
                        {
                            UserId = "b93fa043-cdea-4bd9-9d0b-7b16ee7c5355",
                            SphereId = 59
                        },
                        new
                        {
                            UserId = "b93fa043-cdea-4bd9-9d0b-7b16ee7c5355",
                            SphereId = 60
                        },
                        new
                        {
                            UserId = "7d089603-dc80-415a-913b-f24b1a90b5f1",
                            SphereId = 61
                        },
                        new
                        {
                            UserId = "7d089603-dc80-415a-913b-f24b1a90b5f1",
                            SphereId = 64
                        },
                        new
                        {
                            UserId = "7d089603-dc80-415a-913b-f24b1a90b5f1",
                            SphereId = 66
                        },
                        new
                        {
                            UserId = "ca145762-b5db-4836-b963-85eff67fb124",
                            SphereId = 61
                        },
                        new
                        {
                            UserId = "ca145762-b5db-4836-b963-85eff67fb124",
                            SphereId = 15
                        },
                        new
                        {
                            UserId = "ca145762-b5db-4836-b963-85eff67fb124",
                            SphereId = 52
                        },
                        new
                        {
                            UserId = "8d0c3b82-be4b-4fdf-834a-8e436176d9bd",
                            SphereId = 13
                        },
                        new
                        {
                            UserId = "8d0c3b82-be4b-4fdf-834a-8e436176d9bd",
                            SphereId = 15
                        },
                        new
                        {
                            UserId = "8d0c3b82-be4b-4fdf-834a-8e436176d9bd",
                            SphereId = 62
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PathFinder.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PathFinder.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PathFinder.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PathFinder.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PathFinder.Data.Models.Course", b =>
                {
                    b.HasOne("PathFinder.Data.Models.ApplicationUser", "Institution")
                        .WithMany("Course")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("PathFinder.Data.Models.CourseSphere", b =>
                {
                    b.HasOne("PathFinder.Data.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PathFinder.Data.Models.Course", null)
                        .WithMany("CoursesSpheres")
                        .HasForeignKey("CourseId1");

                    b.HasOne("PathFinder.Data.Models.Sphere", "Sphere")
                        .WithMany()
                        .HasForeignKey("SphereId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PathFinder.Data.Models.Sphere", null)
                        .WithMany("CoursesSpheres")
                        .HasForeignKey("SphereId1");

                    b.Navigation("Course");

                    b.Navigation("Sphere");
                });

            modelBuilder.Entity("PathFinder.Data.Models.Job", b =>
                {
                    b.HasOne("PathFinder.Data.Models.ApplicationUser", "Company")
                        .WithMany("Jobs")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("PathFinder.Data.Models.JobSphere", b =>
                {
                    b.HasOne("PathFinder.Data.Models.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PathFinder.Data.Models.Job", null)
                        .WithMany("JobsSpheres")
                        .HasForeignKey("JobId1");

                    b.HasOne("PathFinder.Data.Models.Sphere", "Sphere")
                        .WithMany()
                        .HasForeignKey("SphereId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PathFinder.Data.Models.Sphere", null)
                        .WithMany("JobsSpheres")
                        .HasForeignKey("SphereId1");

                    b.Navigation("Job");

                    b.Navigation("Sphere");
                });

            modelBuilder.Entity("PathFinder.Data.Models.Review", b =>
                {
                    b.HasOne("PathFinder.Data.Models.Course", "Course")
                        .WithMany("Reviews")
                        .HasForeignKey("CourseId");

                    b.HasOne("PathFinder.Data.Models.Job", "Job")
                        .WithMany("Reviews")
                        .HasForeignKey("JobId");

                    b.HasOne("PathFinder.Data.Models.ApplicationUser", "Publisher")
                        .WithMany("Reviews")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Job");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("PathFinder.Data.Models.UserCourse", b =>
                {
                    b.HasOne("PathFinder.Data.Models.ApplicationUser", null)
                        .WithMany("UsersCourses")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("PathFinder.Data.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PathFinder.Data.Models.Course", null)
                        .WithMany("UsersCourses")
                        .HasForeignKey("CourseId1");

                    b.HasOne("PathFinder.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PathFinder.Data.Models.UserJob", b =>
                {
                    b.HasOne("PathFinder.Data.Models.ApplicationUser", null)
                        .WithMany("UsersJobs")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("PathFinder.Data.Models.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PathFinder.Data.Models.Job", null)
                        .WithMany("UsersJobs")
                        .HasForeignKey("JobId1");

                    b.HasOne("PathFinder.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PathFinder.Data.Models.UserSphere", b =>
                {
                    b.HasOne("PathFinder.Data.Models.ApplicationUser", null)
                        .WithMany("UsersSpheres")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("PathFinder.Data.Models.Sphere", "Sphere")
                        .WithMany()
                        .HasForeignKey("SphereId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PathFinder.Data.Models.Sphere", null)
                        .WithMany("UsersSpheres")
                        .HasForeignKey("SphereId1");

                    b.HasOne("PathFinder.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Sphere");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PathFinder.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Course");

                    b.Navigation("Jobs");

                    b.Navigation("Reviews");

                    b.Navigation("UsersCourses");

                    b.Navigation("UsersJobs");

                    b.Navigation("UsersSpheres");
                });

            modelBuilder.Entity("PathFinder.Data.Models.Course", b =>
                {
                    b.Navigation("CoursesSpheres");

                    b.Navigation("Reviews");

                    b.Navigation("UsersCourses");
                });

            modelBuilder.Entity("PathFinder.Data.Models.Job", b =>
                {
                    b.Navigation("JobsSpheres");

                    b.Navigation("Reviews");

                    b.Navigation("UsersJobs");
                });

            modelBuilder.Entity("PathFinder.Data.Models.Sphere", b =>
                {
                    b.Navigation("CoursesSpheres");

                    b.Navigation("JobsSpheres");

                    b.Navigation("UsersSpheres");
                });
#pragma warning restore 612, 618
        }
    }
}
