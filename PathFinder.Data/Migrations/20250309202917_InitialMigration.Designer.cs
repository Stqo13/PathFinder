// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PathFinder.Data;

#nullable disable

namespace PathFinder.Data.Migrations
{
    [DbContext(typeof(PathFinderDbContext))]
    [Migration("20250309202917_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a94e9744-895c-4cd0-a450-fb2ca5ea73dc",
                            ConcurrencyStamp = "eab4d980-d470-4b4b-bb99-6768a6d7a63d",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "cbd2b782-e4e3-4f79-84aa-5685d13320cb",
                            ConcurrencyStamp = "4eab5cb1-b6fc-42f3-9f01-93b0625f85b6",
                            Name = "PFUser",
                            NormalizedName = "PFUSER"
                        },
                        new
                        {
                            Id = "b69f39cc-e6e4-4394-b488-0d24c1d546ff",
                            ConcurrencyStamp = "9277a98f-3549-49fd-bb18-9810182b5e8d",
                            Name = "Company",
                            NormalizedName = "COMPANY"
                        },
                        new
                        {
                            Id = "be759a02-939c-4bb6-9063-f25e020d8a56",
                            ConcurrencyStamp = "5b72d0bc-f750-402f-a330-7ebded6824b3",
                            Name = "Institution",
                            NormalizedName = "INSTITUTION"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PathFinder.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("User's address");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasComment("User's date of birth");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasComment("User's first name");

                    b.Property<string>("LastName")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasComment("User's last name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "6a358b17-ffbe-4ac9-8d20-92544e3b739d",
                            AccessFailedCount = 0,
                            Address = "България, Русе, ул. \"Христо Ясенов\" 7",
                            ConcurrencyStamp = "7b7aee87-0da5-484c-a211-5bcc159f1d2e",
                            DateOfBirth = new DateTime(1994, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "artacademy@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "ArtAcademy",
                            LastName = "OOD",
                            LockoutEnabled = false,
                            NormalizedEmail = "ARTACADEMY@GMAIL.COM",
                            NormalizedUserName = "ARTACADEMY123",
                            PasswordHash = "AQAAAAIAAYagAAAAEM1tMVfq0L9ZNcFoLrATNiY6Hm19p2bHDocaxkdtai8bHFgqBv+d1dbEKpszwJnU5Q==",
                            PhoneNumber = "0897902119",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "9775d33a-30c2-4b94-a415-befe08554f94",
                            TwoFactorEnabled = true,
                            UserName = "artacademy123"
                        },
                        new
                        {
                            Id = "fc7c5678-22b4-4650-af6e-4c5f90fa494d",
                            AccessFailedCount = 0,
                            Address = "България, София, ул. \"Цар Асен\" 112",
                            ConcurrencyStamp = "0112058c-73ac-4ee6-8a2c-2427f5dfdd50",
                            DateOfBirth = new DateTime(1994, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "globallingua@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "GlobalLingua",
                            LastName = "OOD",
                            LockoutEnabled = false,
                            NormalizedEmail = "GLOBALLINGUA@GMAIL.COM",
                            NormalizedUserName = "GLOBALLINGUA123",
                            PasswordHash = "AQAAAAIAAYagAAAAEOGWXKhIRuwYhNHjOTFH45Leuinhj4C+JmQd1WBxntwnMpUpTUQSCLNoQpPKUP8Awg==",
                            PhoneNumber = "0897662398",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "7374758d-971d-439d-b244-786455731419",
                            TwoFactorEnabled = true,
                            UserName = "globallingua123"
                        },
                        new
                        {
                            Id = "723444b3-9434-4465-9044-f7e04fdcca2f",
                            AccessFailedCount = 0,
                            Address = "България, София, ул. \"Петър Б. Величков\" 43",
                            ConcurrencyStamp = "c34f5f14-b548-4579-bf2d-996921ab1096",
                            DateOfBirth = new DateTime(1990, 6, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "marketingacademy@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Marketing Academy",
                            LastName = "OOD",
                            LockoutEnabled = false,
                            NormalizedEmail = "MARKETINGACADEMY@GMAIL.COM",
                            NormalizedUserName = "MARKETINGACADEMY123",
                            PasswordHash = "AQAAAAIAAYagAAAAEFGrmDP8ucRa/B/e3qq6AzjPrn52YLziWtLgG6xI8lluNiWH0g5vc973ks7hhHI4gQ==",
                            PhoneNumber = "0877742199",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "47c2eb60-701e-48f7-936d-ce35cf7605cb",
                            TwoFactorEnabled = true,
                            UserName = "marketingacademy123"
                        },
                        new
                        {
                            Id = "428bcf46-40f2-47b2-ac4a-a49f570178ad",
                            AccessFailedCount = 0,
                            Address = "България, София, бул. \"Александър Малинов\" 78",
                            ConcurrencyStamp = "0cb30f9e-d159-461b-b55f-e9e61a8526cb",
                            DateOfBirth = new DateTime(2000, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "softschool@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "SoftSchool",
                            LastName = "AD",
                            LockoutEnabled = false,
                            NormalizedEmail = "SOFTSCHOOL@GMAIL.COM",
                            NormalizedUserName = "SOFTSCHOOL123",
                            PasswordHash = "AQAAAAIAAYagAAAAEIoUJbZNwC2Y6jU1xKKMWAcZ1Y3KOC82KQ6rjS9dcFPQeUx+9NBjqSzmR5mg+IvtPA==",
                            PhoneNumber = "0878765781",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "bb1ca420-e56a-4c8d-a9f9-6b216cfe62c0",
                            TwoFactorEnabled = true,
                            UserName = "softschool123"
                        },
                        new
                        {
                            Id = "3cf3fb4a-235e-4c93-b66f-c1557006e067",
                            AccessFailedCount = 0,
                            Address = "България, Пловдив, бул. \"Цар Борис 3ти Обединител\"",
                            ConcurrencyStamp = "05762a43-2f82-4699-8edf-47117637da8c",
                            DateOfBirth = new DateTime(1980, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "telerikikus@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Telerikikus",
                            LastName = "OD",
                            LockoutEnabled = false,
                            NormalizedEmail = "TELERIKIKUS@GMAIL.COM",
                            NormalizedUserName = "TELERIKIKUS123",
                            PasswordHash = "AQAAAAIAAYagAAAAEJr31PhShfC61UYUU3zbZXfMpw+i0hoxlak0HOMPexFR8mCKSFRQp4XUAyXg3XOfcw==",
                            PhoneNumber = "0898769871",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "9c5d0d59-7e4f-44a0-a9c0-34138a7f6bd7",
                            TwoFactorEnabled = true,
                            UserName = "telerikikus123"
                        },
                        new
                        {
                            Id = "fa360a62-9355-474a-824d-aaa85d9fbd65",
                            AccessFailedCount = 0,
                            Address = "България, Стара Загора, ул. \"Стефан Стамболов\" 38",
                            ConcurrencyStamp = "5754fcac-8c38-41b5-87db-2542af0dc229",
                            DateOfBirth = new DateTime(2001, 7, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "wittmath@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "WittMath",
                            LastName = "OOD",
                            LockoutEnabled = false,
                            NormalizedEmail = "WITTMATH@GMAIL.COM",
                            NormalizedUserName = "WITTMATH123",
                            PasswordHash = "AQAAAAIAAYagAAAAEIgpYlq7ZlUhUV6Q0U8fktRb9uoRfcjvbWI3PcuZjAd4AgsmLUdxOUsHJVCz9dndQg==",
                            PhoneNumber = "0880796431",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "0d538693-e38a-4888-a6b5-9f4b30e67fd3",
                            TwoFactorEnabled = true,
                            UserName = "wittmath123"
                        },
                        new
                        {
                            Id = "35e6291c-73f5-48ef-8f3e-5fda2c4ddee1",
                            AccessFailedCount = 0,
                            Address = "България, Варна, ул. \"Оборище\" 13А",
                            ConcurrencyStamp = "f5340b08-bd7c-4cc6-a8eb-9ab342120170",
                            DateOfBirth = new DateTime(1991, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tastecraftacademy@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "TasteCraft Academy",
                            LastName = "OOD",
                            LockoutEnabled = false,
                            NormalizedEmail = "TASTECRAFTACADEMY@GMAIL.COM",
                            NormalizedUserName = "TASTECRAFTACADEMY123",
                            PasswordHash = "AQAAAAIAAYagAAAAEMOZLBaoKawRhlIbJ2fEjpsqo8uKcn5K3bhKQvR/TMskj1u6SxYmmhZKUAZdFZleSw==",
                            PhoneNumber = "0895002619",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "cbecf16a-3cb4-4523-93d8-8a161d70dff0",
                            TwoFactorEnabled = true,
                            UserName = "tastecraftacademy123"
                        },
                        new
                        {
                            Id = "e0d6328d-f003-4bb1-8daa-21dcf49db469",
                            AccessFailedCount = 0,
                            Address = "България, Плевен, ул. \"Васил Петлешков\" 6",
                            ConcurrencyStamp = "d57c41f1-5a93-4860-ba60-dc07339dea83",
                            DateOfBirth = new DateTime(2002, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "chick@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Chic Cuts & Styles",
                            LastName = "ET",
                            LockoutEnabled = false,
                            NormalizedEmail = "CHIC@GMAIL.COM",
                            NormalizedUserName = "CHIC123",
                            PasswordHash = "AQAAAAIAAYagAAAAEAXNW5FXkP3ee/acPKhDw5X6uZuMzfb6WXxIyERxm++TlqpqP+U5nYBF02zzL1Dctw==",
                            PhoneNumber = "0898769871",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "3a5b175a-6345-4c9a-976c-8e9d086710ae",
                            TwoFactorEnabled = true,
                            UserName = "chic123"
                        },
                        new
                        {
                            Id = "eb1f5c9f-186b-4a93-a9bd-64a6055c61cd",
                            AccessFailedCount = 0,
                            Address = "България, Сливен, бул. \"Цар Освободител\" 15А",
                            ConcurrencyStamp = "780f3dfd-a53f-455d-b6de-08d7b117a4f4",
                            DateOfBirth = new DateTime(2003, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "theurbangrillandbar@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "The Urban Grill & Bar",
                            LastName = "ET",
                            LockoutEnabled = false,
                            NormalizedEmail = "THEURBANGRILLANDBAR@GMAIL.COM",
                            NormalizedUserName = "THEURBANGRILLANDBAR123",
                            PasswordHash = "AQAAAAIAAYagAAAAEHaYm+cDC5bwywfKEbwZ+RBtLdnUMUTZXyJMtN/UUDVsPWd+WZERllZt3JOIS7ocAg==",
                            PhoneNumber = "0878439866",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "b1d08065-b34d-48a8-a6a5-8f9952b7e47f",
                            TwoFactorEnabled = true,
                            UserName = "theurbangrillandbar123"
                        },
                        new
                        {
                            Id = "7dbc12c7-18ec-4af2-a5b7-877ff0df3faf",
                            AccessFailedCount = 0,
                            Address = "България, Врана, ул. \"Козлодуй\" 4",
                            ConcurrencyStamp = "2f20b2df-ac9d-40f4-9d3d-b369f961bbef",
                            DateOfBirth = new DateTime(2006, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "imaginationacademy@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Imagination Academy",
                            LastName = "OOD",
                            LockoutEnabled = false,
                            NormalizedEmail = "IMAGINATIONACADEMY@GMAIL.COM",
                            NormalizedUserName = "IMAGINATIONACADEMY123",
                            PasswordHash = "AQAAAAIAAYagAAAAEL5OVxr0mlW7YEPaHmNW1E9gOvlWAameD7fNdcPrIpXxPOaEoPmO051PgykcBIne9g==",
                            PhoneNumber = "0878433392",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "262ab1f8-5a51-40e4-91c6-3f97cee79c36",
                            TwoFactorEnabled = true,
                            UserName = "imaginationacandemy123"
                        },
                        new
                        {
                            Id = "17585a62-c173-4c68-9e4a-2ba93a419b21",
                            AccessFailedCount = 0,
                            Address = "България, Русе, бул. \"Липник\" 8",
                            ConcurrencyStamp = "b287b5cc-2043-4d42-b7d9-a0fe373dbf1a",
                            DateOfBirth = new DateTime(1986, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "healthcarecentre@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "HealthCare Center",
                            LastName = "OD",
                            LockoutEnabled = false,
                            NormalizedEmail = "HEALTHCARECENTRE@GMAIL.COM",
                            NormalizedUserName = "HEALTHCARECENTRE123",
                            PasswordHash = "AQAAAAIAAYagAAAAED7It+bovSM5YwHlr0JZzSUd17AAlPjYwo98elYokL25CNbMCmiA18yoxGPpNr4vpg==",
                            PhoneNumber = "0870063844",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "0973e238-4178-42cb-8749-f8862ff04e24",
                            TwoFactorEnabled = true,
                            UserName = "healthcarecentre123"
                        },
                        new
                        {
                            Id = "596c6add-eaae-4890-8d4d-38aa5a0671bd",
                            AccessFailedCount = 0,
                            Address = "България, Плевен, ул. \"Иван Вазов\"",
                            ConcurrencyStamp = "3616511b-c3c6-4d31-9d1a-223c8a910028",
                            DateOfBirth = new DateTime(1985, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "primaryinovativeschool.com",
                            EmailConfirmed = true,
                            FirstName = "Primary Inovative School",
                            LastName = "ET",
                            LockoutEnabled = false,
                            NormalizedEmail = "PRIMARYINOVATIVESCHOOL@GMAIL.COM",
                            NormalizedUserName = "PRIMARYINOVATIVESCHOOL123",
                            PasswordHash = "AQAAAAIAAYagAAAAEHHQJvo1EcHc1kPxIJHC82/rvTPyNnLPHv66CgpKVEWBEheBnLUZcE7pTtCrTBsjoQ==",
                            PhoneNumber = "0890811871",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "ce17302e-d942-4433-a133-16f9e09c6cd6",
                            TwoFactorEnabled = true,
                            UserName = "primaryinovativeschool123"
                        },
                        new
                        {
                            Id = "16226cef-b670-447e-99a9-b627cb16ae0b",
                            AccessFailedCount = 0,
                            Address = "Bulgaria, Ruse, ул. \"Rila\" 5",
                            ConcurrencyStamp = "8f263c1f-a671-40fe-95be-949144390c77",
                            DateOfBirth = new DateTime(2016, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sttuning@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "STTuning",
                            LastName = "OOD",
                            LockoutEnabled = false,
                            NormalizedEmail = "STTUNING@GMAIL.COM",
                            NormalizedUserName = "STTUNING123",
                            PasswordHash = "AQAAAAIAAYagAAAAEONQ5ArqIf1ME0h76ByGtJhocbf0VqoQE56UJdaajEQhJfODUmjP2p0/qVptdWHDkA==",
                            PhoneNumber = "0876794891",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "b62db000-5577-466b-b483-62a074f1946b",
                            TwoFactorEnabled = true,
                            UserName = "sttuning123"
                        },
                        new
                        {
                            Id = "b3693b0c-9c11-48ee-a3be-db37d5439ab0",
                            AccessFailedCount = 0,
                            Address = "България, Русе, ул. \"Рила\" 5",
                            ConcurrencyStamp = "8b8f108a-e039-4db7-a72e-181a0f8ce5bd",
                            DateOfBirth = new DateTime(1990, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "codecrafters@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "CodeCrafters",
                            LastName = "ET",
                            LockoutEnabled = false,
                            NormalizedEmail = "CODECRAFTERS@GMAIL.COM",
                            NormalizedUserName = "CODECRAFTERS123",
                            PasswordHash = "AQAAAAIAAYagAAAAEMIg5u3lz/vurgDRxx/qQiNWGrdd2hvM1h7n3urGa1QwhICruEE+0uU+FgK1UIxpHA==",
                            PhoneNumber = "0877769431",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "e8cbe754-d343-48b9-8381-f26a238f39f3",
                            TwoFactorEnabled = true,
                            UserName = "codecrafters123"
                        },
                        new
                        {
                            Id = "e2041514-c5ce-4e68-8956-f92298aa3b74",
                            AccessFailedCount = 0,
                            Address = "България, Казанлък, ул. \"Хемус\" 5",
                            ConcurrencyStamp = "71736cb7-90e4-4129-9ba3-b2f9b660def3",
                            DateOfBirth = new DateTime(2004, 12, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "teodoranedkova@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Теодора",
                            LastName = "Недкова",
                            LockoutEnabled = false,
                            NormalizedEmail = "TEODORANEDKOVA@GMAIL.COM",
                            NormalizedUserName = "TEODORANEDKOVA123",
                            PasswordHash = "AQAAAAIAAYagAAAAEPA7dYGoC9aOZ4LzIOfzqpTCugX3b6kmHDzyn1PT3QA6HiBAjolTzePWWcL1WT2AfQ==",
                            PhoneNumber = "0879859335",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "6a6f3c27-a261-440b-9a7b-44f58d963eb8",
                            TwoFactorEnabled = true,
                            UserName = "teodoranedkova123"
                        },
                        new
                        {
                            Id = "21b4ac01-42ec-4df2-b48c-ebe1cf26adf0",
                            AccessFailedCount = 0,
                            Address = "България, Казанлък, ул. \"Петко Стайнов\" 6",
                            ConcurrencyStamp = "de339b12-3e0f-488d-99f8-91bd92601e44",
                            DateOfBirth = new DateTime(2004, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "stefandimitrov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Стефан",
                            LastName = "Димитров",
                            LockoutEnabled = false,
                            NormalizedEmail = "STEFANDIMITROV@GMAIL.COM",
                            NormalizedUserName = "STEFANDIMITROV123",
                            PasswordHash = "AQAAAAIAAYagAAAAEKHridsDQ1iuTzQavJwkn5f4eJ1uaCI8vU4Y9h/NfmLXuoGt036qnvvSwS9YaJVeIw==",
                            PhoneNumber = "0890854939",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "d85073cd-e84e-489f-a2f2-f1a39e7efdcb",
                            TwoFactorEnabled = true,
                            UserName = "stefandimitrov123"
                        },
                        new
                        {
                            Id = "e47b8b58-2e3a-4f02-aee5-485d3e6db2b2",
                            AccessFailedCount = 0,
                            Address = "България, Казанлък, ул. \"Добри Чинтулов\" 5",
                            ConcurrencyStamp = "1468c1bd-38bd-46c1-9198-11a5a5929076",
                            DateOfBirth = new DateTime(2005, 5, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "alexstefanov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Алекс",
                            LastName = "Стефанов",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEXSTEFANOV@GMAIL.COM",
                            NormalizedUserName = "ALEXSTEFANOV123",
                            PasswordHash = "AQAAAAIAAYagAAAAEKvqB09AZrJfhGhpP2iPH+tv0CMkV6uBLvZP3N2bt82yWZQV6b6UP0toA9at0zGxNQ==",
                            PhoneNumber = "0883856039",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "40d5f0b8-80d5-42bd-a2cf-123eaf702ed7",
                            TwoFactorEnabled = true,
                            UserName = "alexstefanov123"
                        },
                        new
                        {
                            Id = "9e547484-9ea8-45e6-a488-d657f6f1c598",
                            AccessFailedCount = 0,
                            Address = "България, Казанлък, ул. \"Генерал Гурко\" 4",
                            ConcurrencyStamp = "06bdb5ff-b4a9-4a39-a404-a887654124c1",
                            DateOfBirth = new DateTime(2002, 7, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "monikapetrova@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Моника",
                            LastName = "Петрова",
                            LockoutEnabled = false,
                            NormalizedEmail = "MONIKAPETROVA@GMAIL.COM",
                            NormalizedUserName = "MONIKAPETROVA123",
                            PasswordHash = "AQAAAAIAAYagAAAAENs9mw4l/8+JNYkoZgs/t2ayzfWOf1P5Fu+VICanoR0XyJ9csbLM3ICHG24KGWP31w==",
                            PhoneNumber = "0898760394",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "19c20f53-9481-4d01-9d6e-80a22a37e0cb",
                            TwoFactorEnabled = true,
                            UserName = "monikapetrova123"
                        },
                        new
                        {
                            Id = "e8d223af-7285-41c5-8c38-9e6989d4410d",
                            AccessFailedCount = 0,
                            Address = "България, Казанлък, ул. \"Генерал Стоянов\" 3",
                            ConcurrencyStamp = "ca713ead-ea2e-41cd-8131-186d110f59cc",
                            DateOfBirth = new DateTime(2001, 8, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "iliqmilenov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Илия",
                            LastName = "Миленов",
                            LockoutEnabled = false,
                            NormalizedEmail = "ILIQMILENOV@GMAIL.COM",
                            NormalizedUserName = "ILIQMILENOV123",
                            PasswordHash = "AQAAAAIAAYagAAAAEL52fRHjhV0tfY8NyraxB+2adBBjqQ//safbUKLOvpHsnOB9c/o6QAPXTYyd6m5/WA==",
                            PhoneNumber = "0895068785",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "bf605a3e-82cd-41e4-af72-924048412999",
                            TwoFactorEnabled = true,
                            UserName = "iliqmilenov123"
                        },
                        new
                        {
                            Id = "d444522c-71c1-4cc9-b815-4ea25a49f17b",
                            AccessFailedCount = 0,
                            Address = "България, Казанлък, ул. \"Георги Сава Раковски\" 7",
                            ConcurrencyStamp = "e408b7c7-36df-40fb-99d8-a14d1b557326",
                            DateOfBirth = new DateTime(1998, 3, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "atanasgudov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Атанас",
                            LastName = "Гудов",
                            LockoutEnabled = false,
                            NormalizedEmail = "ATANASGUDOV@GMAIL.COM",
                            NormalizedUserName = "ATANASGUDOV123",
                            PasswordHash = "AQAAAAIAAYagAAAAEB1JSldehMi3JySTHxVDkS3p6KQSBol5vKX52l8DP3XqX1NNTcIgAtKrFxqj+GAZXg==",
                            PhoneNumber = "0885248739",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "ad7cfdc2-656c-4b40-b6a3-146aee35210e",
                            TwoFactorEnabled = true,
                            UserName = "atanasgudov123"
                        },
                        new
                        {
                            Id = "b93fa043-cdea-4bd9-9d0b-7b16ee7c5355",
                            AccessFailedCount = 0,
                            Address = "България, Пловдив, ул. \"Георги Раковски\" 7",
                            ConcurrencyStamp = "4b9dae32-684c-4dac-8a19-bd5f5e3ec80b",
                            DateOfBirth = new DateTime(1989, 8, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "simonamincheva@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Симона",
                            LastName = "Минчева",
                            LockoutEnabled = false,
                            NormalizedEmail = "SIMONAMINCHEVA@GMAIL.COM",
                            NormalizedUserName = "SIMONAMINCHEVA123",
                            PasswordHash = "AQAAAAIAAYagAAAAEBGR6g1CIir+nmVbuZD/Wm3qrsy4ltY6mhN7xzvdEg6zrSVNOKmYfEl7N24hkE5LGQ==",
                            PhoneNumber = "0897448199",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "e3198ac3-58fb-450d-8299-66e7ba830fed",
                            TwoFactorEnabled = true,
                            UserName = "simonamincheva123"
                        },
                        new
                        {
                            Id = "7d089603-dc80-415a-913b-f24b1a90b5f1",
                            AccessFailedCount = 0,
                            Address = "България, Плевен, ул. \"Хаджи Димитър\" 10",
                            ConcurrencyStamp = "6ae3312e-e078-4f02-9802-20c42f5c9e9b",
                            DateOfBirth = new DateTime(1995, 2, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "georgivasilev@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Георги",
                            LastName = "Василев",
                            LockoutEnabled = false,
                            NormalizedEmail = "GEORGIVASILEV@GMAIL.COM",
                            NormalizedUserName = "GEORGIVASILEV123",
                            PasswordHash = "AQAAAAIAAYagAAAAEBxlOmGfKjIHwyqXwxs74s0+4xPA4HHfo1Zzx9VnxazYcl7UqX62kiABMaDmNfc1tQ==",
                            PhoneNumber = "0804442391",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "81ff3f67-9911-426b-ad58-5822c91a286b",
                            TwoFactorEnabled = true,
                            UserName = "georgivasilev123"
                        },
                        new
                        {
                            Id = "ca145762-b5db-4836-b963-85eff67fb124",
                            AccessFailedCount = 0,
                            Address = "България, Плевен, ул. \"Христо Ботев\" 4",
                            ConcurrencyStamp = "876dbee3-a06a-4e3f-8cfc-1fe3266311e2",
                            DateOfBirth = new DateTime(1999, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "krasimirdraganov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Krasimir",
                            LastName = "Draganov",
                            LockoutEnabled = false,
                            NormalizedEmail = "KRASIMIRDRAGANOV@GMAIL.COM",
                            NormalizedUserName = "KRASIMIRDRAGANOV123",
                            PasswordHash = "AQAAAAIAAYagAAAAEMGNXbe0EiCVEO8uGMJoCaqvLNVXZpohSKIugLwhCww2VzWMiwwV97yVpkDO+YrnuA==",
                            PhoneNumber = "0894555391",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "a9bf1e02-3908-41f9-9e51-a5987f87d9b1",
                            TwoFactorEnabled = true,
                            UserName = "krasimirdraganov123"
                        },
                        new
                        {
                            Id = "8d0c3b82-be4b-4fdf-834a-8e436176d9bd",
                            AccessFailedCount = 0,
                            Address = "България, Плевен, ул. \"Стефан Караджа\" 6",
                            ConcurrencyStamp = "cf7b700a-1ab8-4412-9ba2-251b61d1ad63",
                            DateOfBirth = new DateTime(1996, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "svetlingeorgiev@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Светлин",
                            LastName = "Георгиев",
                            LockoutEnabled = false,
                            NormalizedEmail = "SVETLINGEORGIEV@GMAIL.COM",
                            NormalizedUserName = "SVETLINGEORGIEV123",
                            PasswordHash = "AQAAAAIAAYagAAAAECQ/ynPpGWePhg2coHLGBzheqixoNGe+Kj4e2wGccQX90FFU1ZJ9zYADuYpsy+hztQ==",
                            PhoneNumber = "0894555881",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "32e3c21f-b33b-4c79-94f9-692b48867884",
                            TwoFactorEnabled = true,
                            UserName = "svetlingeorgiev123"
                        });
                });

            modelBuilder.Entity("PathFinder.Data.Models.CompanyRoleRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Company request identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Reasoning for the role request");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasComment("Role request sender username");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Role request sender id");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("Pending/Accepted/Declined request status");

                    b.HasKey("Id");

                    b.ToTable("CompanyRoleRequests");
                });

            modelBuilder.Entity("PathFinder.Data.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Course's identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("AverageStarRating")
                        .HasColumnType("float")
                        .HasComment("Course's average star rating");

                    b.Property<string>("Coordinates")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Longtitude and Latitude for the course's location");

                    b.Property<int>("CourseDuration")
                        .HasColumnType("int")
                        .HasComment("Course's duration in weeks");

                    b.Property<string>("Description")
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)")
                        .HasComment("Course's description");

                    b.Property<int>("DurationInMinutes")
                        .HasColumnType("int")
                        .HasComment("Course's lesson duration in minutes");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasComment("Couse's end date");

                    b.Property<string>("InstitutionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Institution's foreign key");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Course's location");

                    b.Property<int>("Mode")
                        .HasColumnType("int")
                        .HasComment("Course's mode(Online/In-person)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasComment("Course's name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Course's monthly price");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasComment("Couse's start date");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AverageStarRating = 4.0,
                            CourseDuration = 6,
                            Description = "Научете основите на дигиталния маркетинг, включително SEO, PPC и стратегии за социални медии.",
                            DurationInMinutes = 120,
                            EndDate = new DateTime(2027, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstitutionId = "723444b3-9434-4465-9044-f7e04fdcca2f",
                            IsDeleted = false,
                            Location = "Отдалечено",
                            Mode = 0,
                            Name = "Въведение в дигиталния маркетинг",
                            Price = 1900m,
                            StartDate = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            AverageStarRating = 4.5,
                            CourseDuration = 8,
                            Description = "Овладейте основите на HTML, CSS и JavaScript в този курс за начинаещи.",
                            DurationInMinutes = 150,
                            EndDate = new DateTime(2028, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstitutionId = "428bcf46-40f2-47b2-ac4a-a49f570178ad",
                            IsDeleted = false,
                            Location = "Отдалечено",
                            Mode = 0,
                            Name = "Уеб разработка за начинаещи",
                            Price = 1350m,
                            StartDate = new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            AverageStarRating = 4.7999999999999998,
                            CourseDuration = 4,
                            Description = "Запознайте се с науката за данни и научете алгоритмите на машинното обучение с Python и R.",
                            DurationInMinutes = 180,
                            EndDate = new DateTime(2029, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstitutionId = "3cf3fb4a-235e-4c93-b66f-c1557006e067",
                            IsDeleted = false,
                            Location = "Отдалечено",
                            Mode = 0,
                            Name = "Наука за данни и машинно обучение",
                            Price = 450m,
                            StartDate = new DateTime(2025, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            AverageStarRating = 4.7000000000000002,
                            CourseDuration = 7,
                            Description = "Получете основни познания за изкуствения интелект, неговите приложения и как променя индустриите.",
                            DurationInMinutes = 150,
                            EndDate = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstitutionId = "428bcf46-40f2-47b2-ac4a-a49f570178ad",
                            IsDeleted = false,
                            Location = "Отдалечено",
                            Mode = 0,
                            Name = "Въведение в изкуствения интелект",
                            Price = 1500m,
                            StartDate = new DateTime(2022, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            AverageStarRating = 4.5999999999999996,
                            Coordinates = "42.505681,27.458591",
                            CourseDuration = 9,
                            Description = "Овладейте основите на испанския език, включително лексика, граматика и разговорни умения в ангажираща и интерактивна среда.",
                            DurationInMinutes = 90,
                            EndDate = new DateTime(2030, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstitutionId = "fc7c5678-22b4-4650-af6e-4c5f90fa494d",
                            IsDeleted = false,
                            Location = "България, Бургас, ул. \"Одрин\" 2",
                            Mode = 1,
                            Name = "Испански за начинаещи",
                            Price = 2000m,
                            StartDate = new DateTime(2025, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            AverageStarRating = 4.7999999999999998,
                            Coordinates = "43.210532,27.907042",
                            CourseDuration = 10,
                            Description = "Научете основите на кулинарни техники, безопасност в кухнята и представяне на храна в този курс.",
                            DurationInMinutes = 120,
                            EndDate = new DateTime(2023, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstitutionId = "35e6291c-73f5-48ef-8f3e-5fda2c4ddee1",
                            IsDeleted = false,
                            Location = "България, Варна, ул. \"Оборище\" 13А",
                            Mode = 1,
                            Name = "Въведение в кулинарните изкуства",
                            Price = 2200m,
                            StartDate = new DateTime(2021, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            AverageStarRating = 4.5,
                            Coordinates = "42.195356,24.329969",
                            CourseDuration = 7,
                            Description = "Отпуснете се, възстановете и научете практики на осъзнатост заедно с йога пози за начинаещи в този курс.",
                            DurationInMinutes = 90,
                            EndDate = new DateTime(2025, 2, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstitutionId = "6a358b17-ffbe-4ac9-8d20-92544e3b739d",
                            IsDeleted = false,
                            Location = "България, Пазарджик, ул. \"Найден Геров\" 6",
                            Mode = 1,
                            Name = "Йога и осъзнатост за начинаещи",
                            Price = 1000m,
                            StartDate = new DateTime(2019, 2, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            AverageStarRating = 4.7000000000000002,
                            Coordinates = "42.61825,25.392292",
                            CourseDuration = 4,
                            Description = "Подобрете своите умения в английския език по говорене, слушане, четене и писане чрез практически уроци и упражнения.",
                            DurationInMinutes = 180,
                            EndDate = new DateTime(2025, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstitutionId = "fc7c5678-22b4-4650-af6e-4c5f90fa494d",
                            IsDeleted = false,
                            Location = "България, Казанлък, ул. \"Иван Вазов\" 3",
                            Mode = 1,
                            Name = "Майсторство в английския език",
                            Price = 900m,
                            StartDate = new DateTime(2025, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            AverageStarRating = 4.7999999999999998,
                            Coordinates = "42.687535,23.328508",
                            CourseDuration = 17,
                            Description = "Изследвайте основите на изящното изкуство, включително скициране, рисуване и скулптиране, в креативна работна среда.",
                            DurationInMinutes = 240,
                            EndDate = new DateTime(2025, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstitutionId = "6a358b17-ffbe-4ac9-8d20-92544e3b739d",
                            IsDeleted = false,
                            Location = "България, София, бул. Васил Левски 62",
                            Mode = 1,
                            Name = "Основи на изящното изкуство",
                            Price = 2500m,
                            StartDate = new DateTime(2022, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            AverageStarRating = 4.7999999999999998,
                            CourseDuration = 9,
                            Description = "Научете принципите на проектиране на вградени системи, микроконтролери и програмиране в реално време в този цялостен курс за начинаещи.",
                            DurationInMinutes = 240,
                            EndDate = new DateTime(2031, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstitutionId = "3cf3fb4a-235e-4c93-b66f-c1557006e067",
                            IsDeleted = false,
                            Location = "Отдалечено",
                            Mode = 0,
                            Name = "Въведение в вградените системи",
                            Price = 1600m,
                            StartDate = new DateTime(2025, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            AverageStarRating = 4.7000000000000002,
                            Coordinates = "42.680441,23.322253",
                            CourseDuration = 13,
                            Description = "Овладейте принципите на интериорния дизайн, планиране на пространство и теория на цветовете с практически проекти.",
                            DurationInMinutes = 180,
                            EndDate = new DateTime(2025, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstitutionId = "6a358b17-ffbe-4ac9-8d20-92544e3b739d",
                            IsDeleted = false,
                            Location = "България, София, ул. \"Капитан Андреев\" 29",
                            Mode = 1,
                            Name = "Магистърски курс по интериорен дизайн",
                            Price = 2200m,
                            StartDate = new DateTime(2025, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            AverageStarRating = 4.7999999999999998,
                            Coordinates = "42.139492,24.748373",
                            CourseDuration = 10,
                            Description = "Научете основите на музикалната продукция, включително запис, смесване и мастеринг, с практически сесии в студио.",
                            DurationInMinutes = 120,
                            EndDate = new DateTime(2026, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstitutionId = "6a358b17-ffbe-4ac9-8d20-92544e3b739d",
                            IsDeleted = false,
                            Location = "България, Пловдив, ул. \"Иван Вазов\" 23",
                            Mode = 1,
                            Name = "Основи на музикалната продукция",
                            Price = 2000m,
                            StartDate = new DateTime(2023, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13,
                            AverageStarRating = 4.9000000000000004,
                            Coordinates = "42.140365,24.718849",
                            CourseDuration = 15,
                            Description = "Задълбочете своите познания по математическите концепции, включително многомерен калкулус, диференциални уравнения и реални приложения.",
                            DurationInMinutes = 45,
                            EndDate = new DateTime(2025, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstitutionId = "fa360a62-9355-474a-824d-aaa85d9fbd65",
                            IsDeleted = false,
                            Location = "България, Пловдив, ул. \"Перущица\" 15",
                            Mode = 1,
                            Name = "Работилница по напреднала математика",
                            Price = 1100m,
                            StartDate = new DateTime(2023, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 14,
                            AverageStarRating = 4.7999999999999998,
                            CourseDuration = 8,
                            Description = "Научете основни технологии за фронтенд като HTML, CSS, JavaScript и React за изграждане на впечатляващи и отзивчиви уеб приложения.",
                            DurationInMinutes = 100,
                            EndDate = new DateTime(2027, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstitutionId = "428bcf46-40f2-47b2-ac4a-a49f570178ad",
                            IsDeleted = false,
                            Location = "Отдалечено",
                            Mode = 0,
                            Name = "Буткемп по фронтенд уеб разработка",
                            Price = 1500m,
                            StartDate = new DateTime(2025, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 15,
                            AverageStarRating = 4.7000000000000002,
                            CourseDuration = 12,
                            Description = "Изследвайте основните принципи на компютърното инженерство, включително проектиране на хардуер, вградени системи и софтуерна интеграция.",
                            DurationInMinutes = 160,
                            EndDate = new DateTime(2025, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstitutionId = "3cf3fb4a-235e-4c93-b66f-c1557006e067",
                            IsDeleted = false,
                            Location = "Отдалечено",
                            Mode = 0,
                            Name = "Основи на компютърното инженерство",
                            Price = 1000m,
                            StartDate = new DateTime(2023, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 16,
                            AverageStarRating = 4.7999999999999998,
                            Coordinates = "42.150184,24.760268",
                            CourseDuration = 11,
                            Description = "Получете практически опит с протоколи за киберсигурност, техники за криптиране, етично хакерство и мрежова сигурност за защита на дигитални активи.",
                            DurationInMinutes = 260,
                            EndDate = new DateTime(2025, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstitutionId = "428bcf46-40f2-47b2-ac4a-a49f570178ad",
                            IsDeleted = false,
                            Location = "България, Пловдив, ул. \"Захари Зограф\" 10",
                            Mode = 1,
                            Name = "Основи на киберсигурността",
                            Price = 1399m,
                            StartDate = new DateTime(2022, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("PathFinder.Data.Models.CourseSphere", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasComment("Course's foreign key");

                    b.Property<int>("SphereId")
                        .HasColumnType("int")
                        .HasComment("Sphere's foreign key");

                    b.Property<int?>("CourseId1")
                        .HasColumnType("int");

                    b.Property<int?>("SphereId1")
                        .HasColumnType("int");

                    b.HasKey("CourseId", "SphereId");

                    b.HasIndex("CourseId1");

                    b.HasIndex("SphereId");

                    b.HasIndex("SphereId1");

                    b.ToTable("CoursesSpheres", t =>
                        {
                            t.HasComment("Corses' spheres");
                        });

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            SphereId = 42
                        },
                        new
                        {
                            CourseId = 1,
                            SphereId = 8
                        },
                        new
                        {
                            CourseId = 1,
                            SphereId = 3
                        },
                        new
                        {
                            CourseId = 2,
                            SphereId = 12
                        },
                        new
                        {
                            CourseId = 2,
                            SphereId = 6
                        },
                        new
                        {
                            CourseId = 2,
                            SphereId = 2
                        },
                        new
                        {
                            CourseId = 3,
                            SphereId = 2
                        },
                        new
                        {
                            CourseId = 3,
                            SphereId = 6
                        },
                        new
                        {
                            CourseId = 3,
                            SphereId = 11
                        },
                        new
                        {
                            CourseId = 3,
                            SphereId = 58
                        },
                        new
                        {
                            CourseId = 4,
                            SphereId = 2
                        },
                        new
                        {
                            CourseId = 4,
                            SphereId = 6
                        },
                        new
                        {
                            CourseId = 4,
                            SphereId = 46
                        },
                        new
                        {
                            CourseId = 4,
                            SphereId = 13
                        },
                        new
                        {
                            CourseId = 4,
                            SphereId = 11
                        },
                        new
                        {
                            CourseId = 5,
                            SphereId = 4
                        },
                        new
                        {
                            CourseId = 5,
                            SphereId = 60
                        },
                        new
                        {
                            CourseId = 5,
                            SphereId = 61
                        },
                        new
                        {
                            CourseId = 6,
                            SphereId = 5
                        },
                        new
                        {
                            CourseId = 6,
                            SphereId = 35
                        },
                        new
                        {
                            CourseId = 6,
                            SphereId = 62
                        },
                        new
                        {
                            CourseId = 7,
                            SphereId = 18
                        },
                        new
                        {
                            CourseId = 7,
                            SphereId = 63
                        },
                        new
                        {
                            CourseId = 7,
                            SphereId = 64
                        },
                        new
                        {
                            CourseId = 8,
                            SphereId = 4
                        },
                        new
                        {
                            CourseId = 8,
                            SphereId = 60
                        },
                        new
                        {
                            CourseId = 8,
                            SphereId = 61
                        },
                        new
                        {
                            CourseId = 9,
                            SphereId = 5
                        },
                        new
                        {
                            CourseId = 9,
                            SphereId = 48
                        },
                        new
                        {
                            CourseId = 9,
                            SphereId = 7
                        },
                        new
                        {
                            CourseId = 10,
                            SphereId = 2
                        },
                        new
                        {
                            CourseId = 10,
                            SphereId = 6
                        },
                        new
                        {
                            CourseId = 10,
                            SphereId = 11
                        },
                        new
                        {
                            CourseId = 11,
                            SphereId = 9
                        },
                        new
                        {
                            CourseId = 11,
                            SphereId = 5
                        },
                        new
                        {
                            CourseId = 12,
                            SphereId = 5
                        },
                        new
                        {
                            CourseId = 12,
                            SphereId = 40
                        },
                        new
                        {
                            CourseId = 12,
                            SphereId = 65
                        },
                        new
                        {
                            CourseId = 12,
                            SphereId = 66
                        },
                        new
                        {
                            CourseId = 12,
                            SphereId = 67
                        },
                        new
                        {
                            CourseId = 13,
                            SphereId = 4
                        },
                        new
                        {
                            CourseId = 13,
                            SphereId = 58
                        },
                        new
                        {
                            CourseId = 14,
                            SphereId = 12
                        },
                        new
                        {
                            CourseId = 14,
                            SphereId = 14
                        },
                        new
                        {
                            CourseId = 14,
                            SphereId = 7
                        },
                        new
                        {
                            CourseId = 14,
                            SphereId = 46
                        },
                        new
                        {
                            CourseId = 14,
                            SphereId = 6
                        },
                        new
                        {
                            CourseId = 15,
                            SphereId = 2
                        },
                        new
                        {
                            CourseId = 15,
                            SphereId = 6
                        },
                        new
                        {
                            CourseId = 15,
                            SphereId = 11
                        },
                        new
                        {
                            CourseId = 16,
                            SphereId = 2
                        },
                        new
                        {
                            CourseId = 16,
                            SphereId = 6
                        },
                        new
                        {
                            CourseId = 16,
                            SphereId = 47
                        });
                });

            modelBuilder.Entity("PathFinder.Data.Models.InstitutionRoleRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Company request identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Reasoning for the role request");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasComment("Role request sender username");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Role request sender id");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("Pending/Accepted/Declined request status");

                    b.HasKey("Id");

                    b.ToTable("InstitutionRoleRequests");
                });

            modelBuilder.Entity("PathFinder.Data.Models.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Job's idetifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("AverageStarRating")
                        .HasColumnType("float")
                        .HasComment("Job average star rating");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Company's foreign key");

                    b.Property<string>("Coordinates")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Longtitude and Latitude for the job's location");

                    b.Property<string>("Description")
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)")
                        .HasComment("Job's details");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("JobType")
                        .HasColumnType("int")
                        .HasComment("The type of the job");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Job's location");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Job's position");

                    b.Property<string>("Requirement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Job's requiements");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Job salary");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasComment("Job's title");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Jobs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AverageStarRating = 4.5,
                            CompanyId = "b3693b0c-9c11-48ee-a3be-db37d5439ab0",
                            Description = "Разработване и поддръжка на софтуерни решения.",
                            IsDeleted = false,
                            JobType = 0,
                            Location = "Отдалечено",
                            Position = "Младши разработчик",
                            Requirement = "1+ година опит с C# и .NET",
                            Salary = 12000m,
                            Title = "Софтурен разработчик"
                        },
                        new
                        {
                            Id = 2,
                            AverageStarRating = 3.5,
                            CompanyId = "b3693b0c-9c11-48ee-a3be-db37d5439ab0",
                            Description = "Създаване на визуални дизайни за маркетингови материали.",
                            IsDeleted = false,
                            JobType = 0,
                            Location = "Отдалечено",
                            Position = "Старши дизайнер",
                            Requirement = "Производителност с Adobe Suite",
                            Salary = 14500m,
                            Title = "Графичен дизайнер"
                        },
                        new
                        {
                            Id = 3,
                            AverageStarRating = 3.2000000000000002,
                            CompanyId = "e0d6328d-f003-4bb1-8daa-21dcf49db469",
                            Coordinates = "42.642328,24.79907",
                            Description = "Предоставяне на услуги по стайлинг, подстригване и лечение на коса на клиенти.",
                            IsDeleted = false,
                            JobType = 1,
                            Location = "България, Карлово, ул. \"Дъбенско шосе\" 2",
                            Position = "Професионален фризьор",
                            Requirement = "Сертифициран козметолог с 2+ години опит.",
                            Salary = 4000m,
                            Title = "Фризьор"
                        },
                        new
                        {
                            Id = 4,
                            AverageStarRating = 4.2999999999999998,
                            CompanyId = "16226cef-b670-447e-99a9-b627cb16ae0b",
                            Coordinates = "42.119481,24.730979",
                            Description = "Извършване на инспекции, ремонти и редовна поддръжка на превозни средства.",
                            IsDeleted = false,
                            JobType = 1,
                            Location = "България, Пловдив, ул. \"Димо Хаджидимов\" 4В",
                            Position = "Автомобилен техник",
                            Requirement = "Основни механични умения и желание за учене. Не се изисква предишна сертификация.",
                            Salary = 8000m,
                            Title = "Автомеханик"
                        },
                        new
                        {
                            Id = 5,
                            AverageStarRating = 4.0,
                            CompanyId = "17585a62-c173-4c68-9e4a-2ba93a419b21",
                            Coordinates = "42.118114,24.729677",
                            Description = "Диагностициране и лечение на кожни заболявания, предоставяне на експертни съвети за грижа за кожата и извършване на дерматологични процедури.",
                            IsDeleted = false,
                            JobType = 1,
                            Location = "България, Русе, бул. \"Липник\" 8",
                            Position = "Сертифициран дерматолог",
                            Requirement = "Медицинска степен със специализация по дерматология. Изисква се валидна медицинска лицензия.",
                            Salary = 12000m,
                            Title = "Дерматолог"
                        },
                        new
                        {
                            Id = 6,
                            AverageStarRating = 2.6000000000000001,
                            CompanyId = "596c6add-eaae-4890-8d4d-38aa5a0671bd",
                            Coordinates = "43.412509,24.622857",
                            Description = "Преподаване на математика на ученици, подготовка на уроци и оценяване на напредъка на учениците.",
                            IsDeleted = false,
                            JobType = 1,
                            Location = "България, Плевен, ул. \"Иван Вазов\"",
                            Position = "Учител по математика в гимназия",
                            Requirement = "Бакалавърска степен по математика или образование. Преподавателска сертификация се предпочита.",
                            Salary = 5000m,
                            Title = "Учител по математика"
                        },
                        new
                        {
                            Id = 7,
                            AverageStarRating = 4.0999999999999996,
                            CompanyId = "596c6add-eaae-4890-8d4d-38aa5a0671bd",
                            Coordinates = "43.412509,24.622857",
                            Description = "Поддържане на чистотата и реда в училищните тоалетни чрез извършване на рутинни почистващи задачи като метене, миене и дезинфекция на повърхности.",
                            IsDeleted = false,
                            JobType = 1,
                            Location = "България, Плевен, ул. \"Иван Вазов\"",
                            Position = "Почистващ персонал в тоалетни",
                            Requirement = "Не се изисква опит, но внимание към детайлите и надеждност са от съществено значение.",
                            Salary = 1500m,
                            Title = "Учител по почистване на училище"
                        },
                        new
                        {
                            Id = 8,
                            AverageStarRating = 4.0999999999999996,
                            CompanyId = "eb1f5c9f-186b-4a93-a9bd-64a6055c61cd",
                            Coordinates = "42.680454,26.320009",
                            Description = "Приготвяне и сервиране на алкохолни и безалкохолни напитки, предоставяне на отлично обслужване на клиенти и поддържане на чистота и организация на бара.",
                            IsDeleted = false,
                            JobType = 1,
                            Location = "България, Сливен, бул. \"Цар Освободител\" 15А",
                            Position = "Барман",
                            Requirement = "Не се изисква опит, но внимание към детайлите и надеждност са от съществено значение.",
                            Salary = 1500m,
                            Title = "Барман"
                        },
                        new
                        {
                            Id = 9,
                            AverageStarRating = 3.3999999999999999,
                            CompanyId = "eb1f5c9f-186b-4a93-a9bd-64a6055c61cd",
                            Coordinates = "42.680454,26.320009",
                            Description = "Предоставяне на отлично обслужване на клиентите чрез приемане на поръчки, сервиране на храна и напитки и осигуряване на удовлетвореността на клиентите.",
                            IsDeleted = false,
                            JobType = 1,
                            Location = "България, Сливен, бул. \"Цар Освободител\" 15А",
                            Position = "Сервитьор в ресторант",
                            Requirement = "Добри комуникационни умения и приятелско отношение. Не се изисква опит.",
                            Salary = 2000m,
                            Title = "Сервитьор"
                        },
                        new
                        {
                            Id = 10,
                            AverageStarRating = 4.9000000000000004,
                            CompanyId = "7dbc12c7-18ec-4af2-a5b7-877ff0df3faf",
                            Description = "Писане на ангажиращи статии, блогове и уеб съдържание за клиенти от различни индустрии.",
                            IsDeleted = false,
                            JobType = 0,
                            Location = "Отдалечено",
                            Position = "Фриланс писател",
                            Requirement = "Отлични писателски умения и креативност. Портфолио се предпочита.",
                            Salary = 5000m,
                            Title = "Копирайтър"
                        },
                        new
                        {
                            Id = 11,
                            AverageStarRating = 3.7000000000000002,
                            CompanyId = "7dbc12c7-18ec-4af2-a5b7-877ff0df3faf",
                            Description = "Редактиране и подобряване на видео съдържание, добавяне на преходи, ефекти и звукови тракове за създаване на висококачествени продукции.",
                            IsDeleted = false,
                            JobType = 0,
                            Location = "Отдалечено",
                            Position = "Фриланс видеоредактор",
                            Requirement = "Производителност с видео редакторски софтуер като Adobe Premiere Pro, Final Cut Pro или DaVinci Resolve. Портфолио се изисква.",
                            Salary = 6000m,
                            Title = "Видеоредактор"
                        },
                        new
                        {
                            Id = 12,
                            AverageStarRating = 4.0999999999999996,
                            CompanyId = "b3693b0c-9c11-48ee-a3be-db37d5439ab0",
                            Coordinates = "43.207564,27.918225",
                            Description = "Помощ при разработване, тестване и отстраняване на грешки в софтуерни приложения под ръководството на старши разработчици.",
                            IsDeleted = false,
                            JobType = 2,
                            Location = "България, Варна, бул. \"8-ми Приморски полк\" 54",
                            Position = "Стажант разработчик",
                            Requirement = "Записан в програма за компютърни науки или свързана специалност. Основни познания по програмни езици като Python или Java.",
                            Salary = 500m,
                            Title = "Стажант по софтуерно разработване"
                        },
                        new
                        {
                            Id = 13,
                            AverageStarRating = 3.7999999999999998,
                            CompanyId = "b3693b0c-9c11-48ee-a3be-db37d5439ab0",
                            Coordinates = "42.659204,23.414001",
                            Description = "Помощ на дизайнерския екип при създаване на визуални активи, включително графики за социални медии, маркетингови материали и презентации.",
                            IsDeleted = false,
                            JobType = 2,
                            Location = "България, София, ул. \"Мюнхен\" 14",
                            Position = "Стажант графичен дизайнер",
                            Requirement = "Записан в програма за графичен дизайн или свързана специалност. Производителност с дизайнерски софтуер като Adobe Illustrator и Photoshop се предпочита.",
                            Salary = 700m,
                            Title = "Стажант графичен дизайнер"
                        },
                        new
                        {
                            Id = 14,
                            AverageStarRating = 3.8999999999999999,
                            CompanyId = "17585a62-c173-4c68-9e4a-2ba93a419b21",
                            Coordinates = "43.84582,25.966291",
                            Description = "Помощ на фармацевти при разпределяне на лекарства, приготвяне на рецепти, управление на инвентар и предоставяне на обслужване на клиенти под наблюдение.",
                            IsDeleted = false,
                            JobType = 2,
                            Location = "България, Русе, бул. \"Липник\" 8",
                            Position = "Стажант фармацевт",
                            Requirement = "Записан в програма за фармацевтика или фармацевтични науки. Добро внимание към детайлите и комуникационни умения.",
                            Salary = 900m,
                            Title = "Стажант в аптека"
                        },
                        new
                        {
                            Id = 15,
                            AverageStarRating = 4.0999999999999996,
                            CompanyId = "17585a62-c173-4c68-9e4a-2ba93a419b21",
                            Coordinates = "43.84582,25.966291",
                            Description = "Предоставяне на медицинска грижа, свързана с женското здраве, включително диагностика, лечение и профилактика на репродуктивни здравословни проблеми, както и извършване на гинекологични прегледи и процедури.",
                            IsDeleted = false,
                            JobType = 1,
                            Location = "България, Русе, бул. \"Липник\" 8",
                            Position = "Сертифициран гинеколог",
                            Requirement = "Медицинска степен със специализация по гинекология. Изисква се валидна медицинска лицензия.",
                            Salary = 13000m,
                            Title = "Гинеколог"
                        });
                });

            modelBuilder.Entity("PathFinder.Data.Models.JobSphere", b =>
                {
                    b.Property<int>("JobId")
                        .HasColumnType("int")
                        .HasComment("Job's foreign key");

                    b.Property<int>("SphereId")
                        .HasColumnType("int")
                        .HasComment("Sphere's foreign key");

                    b.Property<int?>("JobId1")
                        .HasColumnType("int");

                    b.Property<int?>("SphereId1")
                        .HasColumnType("int");

                    b.HasKey("JobId", "SphereId");

                    b.HasIndex("JobId1");

                    b.HasIndex("SphereId");

                    b.HasIndex("SphereId1");

                    b.ToTable("JobsSpheres", t =>
                        {
                            t.HasComment("Jobs' spheres");
                        });

                    b.HasData(
                        new
                        {
                            JobId = 1,
                            SphereId = 2
                        },
                        new
                        {
                            JobId = 1,
                            SphereId = 6
                        },
                        new
                        {
                            JobId = 1,
                            SphereId = 12
                        },
                        new
                        {
                            JobId = 1,
                            SphereId = 13
                        },
                        new
                        {
                            JobId = 1,
                            SphereId = 46
                        },
                        new
                        {
                            JobId = 2,
                            SphereId = 5
                        },
                        new
                        {
                            JobId = 2,
                            SphereId = 7
                        },
                        new
                        {
                            JobId = 2,
                            SphereId = 15
                        },
                        new
                        {
                            JobId = 3,
                            SphereId = 16
                        },
                        new
                        {
                            JobId = 3,
                            SphereId = 17
                        },
                        new
                        {
                            JobId = 3,
                            SphereId = 18
                        },
                        new
                        {
                            JobId = 3,
                            SphereId = 59
                        },
                        new
                        {
                            JobId = 4,
                            SphereId = 17
                        },
                        new
                        {
                            JobId = 4,
                            SphereId = 19
                        },
                        new
                        {
                            JobId = 5,
                            SphereId = 16
                        },
                        new
                        {
                            JobId = 5,
                            SphereId = 1
                        },
                        new
                        {
                            JobId = 5,
                            SphereId = 18
                        },
                        new
                        {
                            JobId = 5,
                            SphereId = 2
                        },
                        new
                        {
                            JobId = 5,
                            SphereId = 24
                        },
                        new
                        {
                            JobId = 5,
                            SphereId = 50
                        },
                        new
                        {
                            JobId = 5,
                            SphereId = 25
                        },
                        new
                        {
                            JobId = 6,
                            SphereId = 4
                        },
                        new
                        {
                            JobId = 6,
                            SphereId = 58
                        },
                        new
                        {
                            JobId = 7,
                            SphereId = 17
                        },
                        new
                        {
                            JobId = 7,
                            SphereId = 18
                        },
                        new
                        {
                            JobId = 7,
                            SphereId = 31
                        },
                        new
                        {
                            JobId = 8,
                            SphereId = 17
                        },
                        new
                        {
                            JobId = 8,
                            SphereId = 35
                        },
                        new
                        {
                            JobId = 8,
                            SphereId = 38
                        },
                        new
                        {
                            JobId = 9,
                            SphereId = 17
                        },
                        new
                        {
                            JobId = 9,
                            SphereId = 59
                        },
                        new
                        {
                            JobId = 10,
                            SphereId = 5
                        },
                        new
                        {
                            JobId = 10,
                            SphereId = 45
                        },
                        new
                        {
                            JobId = 10,
                            SphereId = 40
                        },
                        new
                        {
                            JobId = 10,
                            SphereId = 36
                        },
                        new
                        {
                            JobId = 11,
                            SphereId = 5
                        },
                        new
                        {
                            JobId = 11,
                            SphereId = 7
                        },
                        new
                        {
                            JobId = 11,
                            SphereId = 36
                        },
                        new
                        {
                            JobId = 11,
                            SphereId = 2
                        },
                        new
                        {
                            JobId = 11,
                            SphereId = 40
                        },
                        new
                        {
                            JobId = 11,
                            SphereId = 44
                        },
                        new
                        {
                            JobId = 11,
                            SphereId = 45
                        },
                        new
                        {
                            JobId = 11,
                            SphereId = 48
                        },
                        new
                        {
                            JobId = 12,
                            SphereId = 2
                        },
                        new
                        {
                            JobId = 12,
                            SphereId = 6
                        },
                        new
                        {
                            JobId = 12,
                            SphereId = 12
                        },
                        new
                        {
                            JobId = 12,
                            SphereId = 13
                        },
                        new
                        {
                            JobId = 13,
                            SphereId = 5
                        },
                        new
                        {
                            JobId = 13,
                            SphereId = 7
                        },
                        new
                        {
                            JobId = 13,
                            SphereId = 12
                        },
                        new
                        {
                            JobId = 13,
                            SphereId = 6
                        },
                        new
                        {
                            JobId = 14,
                            SphereId = 24
                        },
                        new
                        {
                            JobId = 14,
                            SphereId = 18
                        },
                        new
                        {
                            JobId = 14,
                            SphereId = 26
                        },
                        new
                        {
                            JobId = 14,
                            SphereId = 1
                        },
                        new
                        {
                            JobId = 14,
                            SphereId = 49
                        },
                        new
                        {
                            JobId = 15,
                            SphereId = 52
                        },
                        new
                        {
                            JobId = 15,
                            SphereId = 18
                        },
                        new
                        {
                            JobId = 15,
                            SphereId = 50
                        },
                        new
                        {
                            JobId = 15,
                            SphereId = 51
                        },
                        new
                        {
                            JobId = 15,
                            SphereId = 24
                        },
                        new
                        {
                            JobId = 15,
                            SphereId = 1
                        });
                });

            modelBuilder.Entity("PathFinder.Data.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Review's idetifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(750)
                        .HasColumnType("nvarchar(750)")
                        .HasComment("Comment");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasComment("Course's foreign key");

                    b.Property<int?>("JobId")
                        .HasColumnType("int")
                        .HasComment("Job's foreign key");

                    b.Property<string>("PublisherId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Publisher's foreign key");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2")
                        .HasComment("Review's date");

                    b.Property<int?>("StarRating")
                        .HasColumnType("int")
                        .HasComment("Review's star rating");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("JobId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "Работата като гинеколог тук беше невероятно удовлетворяваща. Медицинският екип е много подкрепящ, и чувствам, че уменията ми се ценят. Клиниката осигурява отличен баланс между работа и личен живот и има много възможности за професионално развитие.",
                            JobId = 15,
                            PublisherId = "e8d223af-7285-41c5-8c38-9e6989d4410d",
                            ReviewDate = new DateTime(2024, 12, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StarRating = 5
                        },
                        new
                        {
                            Id = 2,
                            Comment = "Работната среда е стресираща, с много пациенти и недостатъчно време, за да се обърне внимание на всеки. Няма много възможности за напредък, а управлението не подкрепя новите идеи или подобрения.",
                            JobId = 15,
                            PublisherId = "ca145762-b5db-4836-b963-85eff67fb124",
                            ReviewDate = new DateTime(2024, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StarRating = 2
                        },
                        new
                        {
                            Id = 3,
                            Comment = "Работата като фризьор тук беше фантастично изживяване. Екипът е подкрепящ, а аз научих толкова много от старшите стилисти. Работната среда е приветлива, а възможностите за професионално развитие са много.",
                            JobId = 3,
                            PublisherId = "b93fa043-cdea-4bd9-9d0b-7b16ee7c5355",
                            ReviewDate = new DateTime(2024, 12, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StarRating = 5
                        },
                        new
                        {
                            Id = 4,
                            Comment = "Работата може да бъде физически изтощителна и работната среда често е хаотична. Липсва ясна комуникация от управлението, а часовете могат да бъдат дълги с недостатъчно време за адекватно обслужване на всеки автомобил. Заплатата не отразява натоварването.",
                            JobId = 4,
                            PublisherId = "7d089603-dc80-415a-913b-f24b1a90b5f1",
                            ReviewDate = new DateTime(2024, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StarRating = 2
                        },
                        new
                        {
                            Id = 5,
                            Comment = "Работата като софтуерен разработчик тук беше изключително удовлетворяваща. Компанията насърчава сътрудничеството, а аз имах възможност да работя с иновативни технологии. Осигурен е добър баланс между работа и личен живот, а управлението подкрепя непрекъснатото учене.",
                            JobId = 1,
                            PublisherId = "b93fa043-cdea-4bd9-9d0b-7b16ee7c5355",
                            ReviewDate = new DateTime(2024, 11, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StarRating = 5
                        },
                        new
                        {
                            Id = 6,
                            Comment = "Работата е физически изтощителна, а често липсва подкрепа от управлението. Часовете могат да бъдат неравномерни, а натоварването понякога е непосилно с малко признание. Комуникацията за задачите и очакванията трябва да се подобри.",
                            JobId = 7,
                            PublisherId = "9e547484-9ea8-45e6-a488-d657f6f1c598",
                            ReviewDate = new DateTime(2024, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StarRating = 2
                        },
                        new
                        {
                            Id = 7,
                            Comment = "Курсът по английски език е изключително добре структуриран. Уроците са ангажиращи, а преподавателите са компетентни и подкрепящи. Курсът значително подобри езиковите ми умения, и сега се чувствам по-сигурен в говоренето и писането на английски.",
                            CourseId = 8,
                            PublisherId = "e47b8b58-2e3a-4f02-aee5-485d3e6db2b2",
                            ReviewDate = new DateTime(2024, 8, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StarRating = 4
                        },
                        new
                        {
                            Id = 8,
                            Comment = "Курсът липсва персонализирано внимание, а темпото може да е твърде бързо за начинаещи. Материалите изглеждат остарели, а няма достатъчно интерактивни елементи, за да се запази интересът на ученик. Не отговори на моите очаквания.",
                            JobId = 8,
                            PublisherId = "9e547484-9ea8-45e6-a488-d657f6f1c598",
                            ReviewDate = new DateTime(2024, 11, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StarRating = 4
                        },
                        new
                        {
                            Id = 9,
                            Comment = "Курсът по уеб разработка надмина очакванията ми. Учебният план е изчерпателен, а преподавателите са много компетентни. Научих практични умения по програмиране и имах възможност да работя по реални проекти. Горещо препоръчвам!",
                            JobId = 2,
                            PublisherId = "e8d223af-7285-41c5-8c38-9e6989d4410d",
                            ReviewDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StarRating = 5
                        },
                        new
                        {
                            Id = 10,
                            Comment = "Курсът беше твърде базов за моите очаквания. Той се съсредоточаваше много върху въведение в концепциите, с много малко задълбочено покритие на напреднали теми. Също така темпото беше твърде бавно, а някои упражнения не бяха толкова предизвикателни, колкото очаквах.",
                            JobId = 4,
                            PublisherId = "9e547484-9ea8-45e6-a488-d657f6f1c598",
                            ReviewDate = new DateTime(2024, 2, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StarRating = 2
                        },
                        new
                        {
                            Id = 11,
                            Comment = "Този курс по изобразително изкуство беше невероятен! Преподавателите бяха изключително талантливи и предложиха персонализирана обратна връзка. Курсът обхвана различни техники и медии, които наистина ми помогнаха да подобря уменията си. Практическото обучение и творческата атмосфера направиха ученето забавно и ангажиращо.",
                            JobId = 9,
                            PublisherId = "ca145762-b5db-4836-b963-85eff67fb124",
                            ReviewDate = new DateTime(2024, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StarRating = 4
                        },
                        new
                        {
                            Id = 12,
                            Comment = "Курсът по испански език беше невероятно преживяване! Преподавателят беше ангажиращ и търпелив, което направи ученето приятно. Уроците бяха интерактивни, а размерът на класа беше идеален за персонализирано внимание. Сега се чувствам много по-сигурен в говоренето и разбирането на испански след завършването на курса.",
                            JobId = 5,
                            PublisherId = "ca145762-b5db-4836-b963-85eff67fb124",
                            ReviewDate = new DateTime(2023, 7, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StarRating = 5
                        });
                });

            modelBuilder.Entity("PathFinder.Data.Models.Sphere", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Sphere's identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Sphere");

                    b.HasKey("Id");

                    b.ToTable("Spheres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Здравеопазване"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Технологии"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Бизнес и финанси"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Образование"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Творчески изкуства"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Компютърни науки"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Графичен дизайн"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Маркетинг и управление"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Архитектура"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Управление на съоръжения"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Инженерство"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Уеб разработка"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Back-End програмиране"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Front-End програмиране"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Adobe дизайн"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Индустрия за красота и лична грижа"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Услуги"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Здраве и социални грижи"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Автомобилна индустрия"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Механично инженерство"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Транспорт и логистика"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Квалифицирани занаяти"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Устойчивост и зелени технологии"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Медицински специалности"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Естетична дерматология"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Фармация"
                        },
                        new
                        {
                            Id = 27,
                            Name = "STEM образование"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Публичен сектор"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Разработка на учебни програми"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Неправителствено образование"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Почистване и поддръжка"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Обществени услуги"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Екологични услуги"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Образователни услуги"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Хранителни и напиткови услуги"
                        },
                        new
                        {
                            Id = 36,
                            Name = "Обслужване на клиенти"
                        },
                        new
                        {
                            Id = 37,
                            Name = "Управление на събития"
                        },
                        new
                        {
                            Id = 38,
                            Name = "Нощен живот и развлекателна индустрия"
                        },
                        new
                        {
                            Id = 39,
                            Name = "Туризъм и отдих"
                        },
                        new
                        {
                            Id = 40,
                            Name = "Медии и журналистика"
                        },
                        new
                        {
                            Id = 41,
                            Name = "Маркетинг и комуникации"
                        },
                        new
                        {
                            Id = 42,
                            Name = "Цифров маркетинг"
                        },
                        new
                        {
                            Id = 43,
                            Name = "Фрилансинг"
                        },
                        new
                        {
                            Id = 44,
                            Name = "Продукция на филми"
                        },
                        new
                        {
                            Id = 45,
                            Name = "Медии"
                        },
                        new
                        {
                            Id = 46,
                            Name = "Разработка на софтуер"
                        },
                        new
                        {
                            Id = 47,
                            Name = "Сигурност"
                        },
                        new
                        {
                            Id = 48,
                            Name = "Визуални изкуства"
                        },
                        new
                        {
                            Id = 49,
                            Name = "Търговия с лекарства"
                        },
                        new
                        {
                            Id = 50,
                            Name = "Клинични грижи"
                        },
                        new
                        {
                            Id = 51,
                            Name = "Репродуктивно здраве"
                        },
                        new
                        {
                            Id = 52,
                            Name = "Женско здраве"
                        },
                        new
                        {
                            Id = 53,
                            Name = "Козметична хирургия"
                        },
                        new
                        {
                            Id = 54,
                            Name = "СПА и уелнес"
                        },
                        new
                        {
                            Id = 55,
                            Name = "Лични грижи"
                        },
                        new
                        {
                            Id = 56,
                            Name = "Управление на салони"
                        },
                        new
                        {
                            Id = 57,
                            Name = "Козметика и фризьорство"
                        },
                        new
                        {
                            Id = 58,
                            Name = "Математика"
                        },
                        new
                        {
                            Id = 59,
                            Name = "Хотелиерство и ресторантьорство"
                        },
                        new
                        {
                            Id = 60,
                            Name = "Културни изследвания"
                        },
                        new
                        {
                            Id = 61,
                            Name = "Езици и лингвистика"
                        },
                        new
                        {
                            Id = 62,
                            Name = "Готварство"
                        },
                        new
                        {
                            Id = 63,
                            Name = "Физическо възпитание"
                        },
                        new
                        {
                            Id = 64,
                            Name = "Фитнес и лични тренировки"
                        },
                        new
                        {
                            Id = 65,
                            Name = "Аудио инженерство"
                        },
                        new
                        {
                            Id = 66,
                            Name = "Музикална композиция"
                        },
                        new
                        {
                            Id = 67,
                            Name = "Музикални технологии"
                        });
                });

            modelBuilder.Entity("PathFinder.Data.Models.UserCourse", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User's foreign key");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasComment("Course's foreign key");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CourseId1")
                        .HasColumnType("int");

                    b.HasKey("UserId", "CourseId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CourseId");

                    b.HasIndex("CourseId1");

                    b.ToTable("UsersCourses", t =>
                        {
                            t.HasComment("Users' courses");
                        });

                    b.HasData(
                        new
                        {
                            UserId = "e47b8b58-2e3a-4f02-aee5-485d3e6db2b2",
                            CourseId = 5
                        },
                        new
                        {
                            UserId = "9e547484-9ea8-45e6-a488-d657f6f1c598",
                            CourseId = 16
                        });
                });

            modelBuilder.Entity("PathFinder.Data.Models.UserJob", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User's foreign key");

                    b.Property<int>("JobId")
                        .HasColumnType("int")
                        .HasComment("Job's foreign key");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("JobId1")
                        .HasColumnType("int");

                    b.HasKey("UserId", "JobId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("JobId");

                    b.HasIndex("JobId1");

                    b.ToTable("UsersJobs", t =>
                        {
                            t.HasComment("Users' jobs");
                        });

                    b.HasData(
                        new
                        {
                            UserId = "e8d223af-7285-41c5-8c38-9e6989d4410d",
                            JobId = 1
                        },
                        new
                        {
                            UserId = "d444522c-71c1-4cc9-b815-4ea25a49f17b",
                            JobId = 2
                        });
                });

            modelBuilder.Entity("PathFinder.Data.Models.UserSphere", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User's foreign key");

                    b.Property<int>("SphereId")
                        .HasColumnType("int")
                        .HasComment("Sphere's foreign key");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("SphereId1")
                        .HasColumnType("int");

                    b.HasKey("UserId", "SphereId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("SphereId");

                    b.HasIndex("SphereId1");

                    b.ToTable("UsersSpheres", t =>
                        {
                            t.HasComment("Users' spheres");
                        });

                    b.HasData(
                        new
                        {
                            UserId = "e47b8b58-2e3a-4f02-aee5-485d3e6db2b2",
                            SphereId = 60
                        },
                        new
                        {
                            UserId = "e47b8b58-2e3a-4f02-aee5-485d3e6db2b2",
                            SphereId = 61
                        },
                        new
                        {
                            UserId = "e47b8b58-2e3a-4f02-aee5-485d3e6db2b2",
                            SphereId = 2
                        },
                        new
                        {
                            UserId = "9e547484-9ea8-45e6-a488-d657f6f1c598",
                            SphereId = 5
                        },
                        new
                        {
                            UserId = "9e547484-9ea8-45e6-a488-d657f6f1c598",
                            SphereId = 7
                        },
                        new
                        {
                            UserId = "9e547484-9ea8-45e6-a488-d657f6f1c598",
                            SphereId = 11
                        },
                        new
                        {
                            UserId = "e8d223af-7285-41c5-8c38-9e6989d4410d",
                            SphereId = 13
                        },
                        new
                        {
                            UserId = "e8d223af-7285-41c5-8c38-9e6989d4410d",
                            SphereId = 12
                        },
                        new
                        {
                            UserId = "e8d223af-7285-41c5-8c38-9e6989d4410d",
                            SphereId = 15
                        },
                        new
                        {
                            UserId = "d444522c-71c1-4cc9-b815-4ea25a49f17b",
                            SphereId = 35
                        },
                        new
                        {
                            UserId = "d444522c-71c1-4cc9-b815-4ea25a49f17b",
                            SphereId = 38
                        },
                        new
                        {
                            UserId = "d444522c-71c1-4cc9-b815-4ea25a49f17b",
                            SphereId = 40
                        },
                        new
                        {
                            UserId = "b93fa043-cdea-4bd9-9d0b-7b16ee7c5355",
                            SphereId = 58
                        },
                        new
                        {
                            UserId = "b93fa043-cdea-4bd9-9d0b-7b16ee7c5355",
                            SphereId = 59
                        },
                        new
                        {
                            UserId = "b93fa043-cdea-4bd9-9d0b-7b16ee7c5355",
                            SphereId = 60
                        },
                        new
                        {
                            UserId = "7d089603-dc80-415a-913b-f24b1a90b5f1",
                            SphereId = 61
                        },
                        new
                        {
                            UserId = "7d089603-dc80-415a-913b-f24b1a90b5f1",
                            SphereId = 64
                        },
                        new
                        {
                            UserId = "7d089603-dc80-415a-913b-f24b1a90b5f1",
                            SphereId = 66
                        },
                        new
                        {
                            UserId = "ca145762-b5db-4836-b963-85eff67fb124",
                            SphereId = 61
                        },
                        new
                        {
                            UserId = "ca145762-b5db-4836-b963-85eff67fb124",
                            SphereId = 15
                        },
                        new
                        {
                            UserId = "ca145762-b5db-4836-b963-85eff67fb124",
                            SphereId = 52
                        },
                        new
                        {
                            UserId = "8d0c3b82-be4b-4fdf-834a-8e436176d9bd",
                            SphereId = 13
                        },
                        new
                        {
                            UserId = "8d0c3b82-be4b-4fdf-834a-8e436176d9bd",
                            SphereId = 15
                        },
                        new
                        {
                            UserId = "8d0c3b82-be4b-4fdf-834a-8e436176d9bd",
                            SphereId = 62
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PathFinder.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PathFinder.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PathFinder.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PathFinder.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PathFinder.Data.Models.Course", b =>
                {
                    b.HasOne("PathFinder.Data.Models.ApplicationUser", "Institution")
                        .WithMany("Course")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("PathFinder.Data.Models.CourseSphere", b =>
                {
                    b.HasOne("PathFinder.Data.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PathFinder.Data.Models.Course", null)
                        .WithMany("CoursesSpheres")
                        .HasForeignKey("CourseId1");

                    b.HasOne("PathFinder.Data.Models.Sphere", "Sphere")
                        .WithMany()
                        .HasForeignKey("SphereId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PathFinder.Data.Models.Sphere", null)
                        .WithMany("CoursesSpheres")
                        .HasForeignKey("SphereId1");

                    b.Navigation("Course");

                    b.Navigation("Sphere");
                });

            modelBuilder.Entity("PathFinder.Data.Models.Job", b =>
                {
                    b.HasOne("PathFinder.Data.Models.ApplicationUser", "Company")
                        .WithMany("Jobs")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("PathFinder.Data.Models.JobSphere", b =>
                {
                    b.HasOne("PathFinder.Data.Models.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PathFinder.Data.Models.Job", null)
                        .WithMany("JobsSpheres")
                        .HasForeignKey("JobId1");

                    b.HasOne("PathFinder.Data.Models.Sphere", "Sphere")
                        .WithMany()
                        .HasForeignKey("SphereId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PathFinder.Data.Models.Sphere", null)
                        .WithMany("JobsSpheres")
                        .HasForeignKey("SphereId1");

                    b.Navigation("Job");

                    b.Navigation("Sphere");
                });

            modelBuilder.Entity("PathFinder.Data.Models.Review", b =>
                {
                    b.HasOne("PathFinder.Data.Models.Course", "Course")
                        .WithMany("Reviews")
                        .HasForeignKey("CourseId");

                    b.HasOne("PathFinder.Data.Models.Job", "Job")
                        .WithMany("Reviews")
                        .HasForeignKey("JobId");

                    b.HasOne("PathFinder.Data.Models.ApplicationUser", "Publisher")
                        .WithMany("Reviews")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Job");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("PathFinder.Data.Models.UserCourse", b =>
                {
                    b.HasOne("PathFinder.Data.Models.ApplicationUser", null)
                        .WithMany("UsersCourses")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("PathFinder.Data.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("PathFinder.Data.Models.Course", null)
                        .WithMany("UsersCourses")
                        .HasForeignKey("CourseId1");

                    b.HasOne("PathFinder.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PathFinder.Data.Models.UserJob", b =>
                {
                    b.HasOne("PathFinder.Data.Models.ApplicationUser", null)
                        .WithMany("UsersJobs")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("PathFinder.Data.Models.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("PathFinder.Data.Models.Job", null)
                        .WithMany("UsersJobs")
                        .HasForeignKey("JobId1");

                    b.HasOne("PathFinder.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PathFinder.Data.Models.UserSphere", b =>
                {
                    b.HasOne("PathFinder.Data.Models.ApplicationUser", null)
                        .WithMany("UsersSpheres")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("PathFinder.Data.Models.Sphere", "Sphere")
                        .WithMany()
                        .HasForeignKey("SphereId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PathFinder.Data.Models.Sphere", null)
                        .WithMany("UsersSpheres")
                        .HasForeignKey("SphereId1");

                    b.HasOne("PathFinder.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Sphere");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PathFinder.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Course");

                    b.Navigation("Jobs");

                    b.Navigation("Reviews");

                    b.Navigation("UsersCourses");

                    b.Navigation("UsersJobs");

                    b.Navigation("UsersSpheres");
                });

            modelBuilder.Entity("PathFinder.Data.Models.Course", b =>
                {
                    b.Navigation("CoursesSpheres");

                    b.Navigation("Reviews");

                    b.Navigation("UsersCourses");
                });

            modelBuilder.Entity("PathFinder.Data.Models.Job", b =>
                {
                    b.Navigation("JobsSpheres");

                    b.Navigation("Reviews");

                    b.Navigation("UsersJobs");
                });

            modelBuilder.Entity("PathFinder.Data.Models.Sphere", b =>
                {
                    b.Navigation("CoursesSpheres");

                    b.Navigation("JobsSpheres");

                    b.Navigation("UsersSpheres");
                });
#pragma warning restore 612, 618
        }
    }
}
